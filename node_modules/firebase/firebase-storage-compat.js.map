{"version":3,"file":"firebase-storage-compat.js","sources":["../storage/src/implementation/connection.ts","../storage-compat/src/index.ts","../util/src/crypt.ts","../util/src/errors.ts","../util/src/compat.ts","../component/src/component.ts","../storage/src/implementation/constants.ts","../storage/src/implementation/error.ts","../storage/src/implementation/location.ts","../storage/src/implementation/failrequest.ts","../storage/src/implementation/type.ts","../storage/src/implementation/url.ts","../storage/src/implementation/request.ts","../storage/src/implementation/backoff.ts","../storage/src/implementation/fs.ts","../storage/src/implementation/string.ts","../storage/src/platform/browser/base64.ts","../storage/src/implementation/blob.ts","../storage/src/implementation/json.ts","../storage/src/implementation/path.ts","../storage/src/implementation/metadata.ts","../storage/src/implementation/list.ts","../storage/src/implementation/requestinfo.ts","../storage/src/implementation/requests.ts","../storage/src/implementation/taskenums.ts","../storage/src/implementation/observer.ts","../storage/src/implementation/async.ts","../storage/src/platform/browser/connection.ts","../storage/src/task.ts","../storage/src/reference.ts","../storage/src/service.ts","../util/src/emulator.ts","../storage/src/api.ts","../storage/src/index.ts","../storage/src/constants.ts","../storage-compat/src/tasksnapshot.ts","../storage-compat/src/task.ts","../storage-compat/src/list.ts","../storage-compat/src/reference.ts","../storage-compat/src/service.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Network headers */\nexport type Headers = Record<string, string>;\n\n/**\n * A lightweight wrapper around XMLHttpRequest with a\n * goog.net.XhrIo-like interface.\n */\nexport interface Connection {\n  /**\n   * This method should never reject. In case of encountering an error, set an error code internally which can be accessed\n   * by calling getErrorCode() by callers.\n   */\n  send(\n    url: string,\n    method: string,\n    body?: ArrayBufferView | Blob | string | null,\n    headers?: Headers\n  ): Promise<void>;\n\n  getErrorCode(): ErrorCode;\n\n  getStatus(): number;\n\n  getResponseText(): string;\n\n  /**\n   * Abort the request.\n   */\n  abort(): void;\n\n  getResponseHeader(header: string): string | null;\n\n  addUploadProgressListener(listener: (p1: ProgressEvent) => void): void;\n\n  removeUploadProgressListener(listener: (p1: ProgressEvent) => void): void;\n}\n\n/**\n * Error codes for requests made by the the XhrIo wrapper.\n */\nexport enum ErrorCode {\n  NO_ERROR = 0,\n  NETWORK_ERROR = 1,\n  ABORT = 2\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport firebase from '@firebase/app-compat';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\nimport {\n  StringFormat,\n  _TaskEvent as TaskEvent,\n  _TaskState as TaskState\n} from '@firebase/storage';\n\nimport { ReferenceCompat } from './reference';\nimport { StorageServiceCompat } from './service';\nimport * as types from '@firebase/storage-types';\nimport {\n  Component,\n  ComponentType,\n  ComponentContainer,\n  InstanceFactoryOptions\n} from '@firebase/component';\n\nimport { name, version } from '../package.json';\n\n/**\n * Type constant for Firebase Storage.\n */\nconst STORAGE_TYPE = 'storage-compat';\n\nfunction factory(\n  container: ComponentContainer,\n  { instanceIdentifier: url }: InstanceFactoryOptions\n): types.FirebaseStorage {\n  // Dependencies\n  const app = container.getProvider('app-compat').getImmediate();\n  const storageExp = container\n    .getProvider('storage')\n    .getImmediate({ identifier: url });\n\n  const storageServiceCompat: StorageServiceCompat = new StorageServiceCompat(\n    app,\n    storageExp\n  );\n  return storageServiceCompat;\n}\n\nexport function registerStorage(instance: _FirebaseNamespace): void {\n  const namespaceExports = {\n    // no-inline\n    TaskState,\n    TaskEvent,\n    StringFormat,\n    Storage: StorageServiceCompat,\n    Reference: ReferenceCompat\n  };\n  instance.INTERNAL.registerComponent(\n    new Component(STORAGE_TYPE, factory, ComponentType.PUBLIC)\n      .setServiceProps(namespaceExports)\n      .setMultipleInstances(true)\n  );\n\n  instance.registerVersion(name, version);\n}\n\nregisterStorage(firebase as unknown as _FirebaseNamespace);\n\n/**\n * Define extension behavior for `registerStorage`\n */\ndeclare module '@firebase/app-compat' {\n  interface FirebaseNamespace {\n    storage?: {\n      (app?: FirebaseApp, url?: string): types.FirebaseStorage;\n      Storage: typeof types.FirebaseStorage;\n\n      StringFormat: {\n        BASE64: types.StringFormat;\n        BASE64URL: types.StringFormat;\n        DATA_URL: types.StringFormat;\n        RAW: types.StringFormat;\n      };\n      TaskEvent: {\n        STATE_CHANGED: types.TaskEvent;\n      };\n      TaskState: {\n        CANCELED: types.TaskState;\n        ERROR: types.TaskState;\n        PAUSED: types.TaskState;\n        RUNNING: types.TaskState;\n        SUCCESS: types.TaskState;\n      };\n    };\n  }\n  interface FirebaseApp {\n    storage?(storageBucket?: string): types.FirebaseStorage;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst stringToByteArray = function (str: string): number[] {\n  // TODO(user): Use native implementations if/when available\n  const out: number[] = [];\n  let p = 0;\n  for (let i = 0; i < str.length; i++) {\n    let c = str.charCodeAt(i);\n    if (c < 128) {\n      out[p++] = c;\n    } else if (c < 2048) {\n      out[p++] = (c >> 6) | 192;\n      out[p++] = (c & 63) | 128;\n    } else if (\n      (c & 0xfc00) === 0xd800 &&\n      i + 1 < str.length &&\n      (str.charCodeAt(i + 1) & 0xfc00) === 0xdc00\n    ) {\n      // Surrogate Pair\n      c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);\n      out[p++] = (c >> 18) | 240;\n      out[p++] = ((c >> 12) & 63) | 128;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    } else {\n      out[p++] = (c >> 12) | 224;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    }\n  }\n  return out;\n};\n\n/**\n * Turns an array of numbers into the string given by the concatenation of the\n * characters to which the numbers correspond.\n * @param bytes Array of numbers representing characters.\n * @return Stringification of the array.\n */\nconst byteArrayToString = function (bytes: number[]): string {\n  // TODO(user): Use native implementations if/when available\n  const out: string[] = [];\n  let pos = 0,\n    c = 0;\n  while (pos < bytes.length) {\n    const c1 = bytes[pos++];\n    if (c1 < 128) {\n      out[c++] = String.fromCharCode(c1);\n    } else if (c1 > 191 && c1 < 224) {\n      const c2 = bytes[pos++];\n      out[c++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));\n    } else if (c1 > 239 && c1 < 365) {\n      // Surrogate Pair\n      const c2 = bytes[pos++];\n      const c3 = bytes[pos++];\n      const c4 = bytes[pos++];\n      const u =\n        (((c1 & 7) << 18) | ((c2 & 63) << 12) | ((c3 & 63) << 6) | (c4 & 63)) -\n        0x10000;\n      out[c++] = String.fromCharCode(0xd800 + (u >> 10));\n      out[c++] = String.fromCharCode(0xdc00 + (u & 1023));\n    } else {\n      const c2 = bytes[pos++];\n      const c3 = bytes[pos++];\n      out[c++] = String.fromCharCode(\n        ((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63)\n      );\n    }\n  }\n  return out.join('');\n};\n\ninterface Base64 {\n  byteToCharMap_: { [key: number]: string } | null;\n  charToByteMap_: { [key: string]: number } | null;\n  byteToCharMapWebSafe_: { [key: number]: string } | null;\n  charToByteMapWebSafe_: { [key: string]: number } | null;\n  ENCODED_VALS_BASE: string;\n  readonly ENCODED_VALS: string;\n  readonly ENCODED_VALS_WEBSAFE: string;\n  HAS_NATIVE_SUPPORT: boolean;\n  encodeByteArray(input: number[] | Uint8Array, webSafe?: boolean): string;\n  encodeString(input: string, webSafe?: boolean): string;\n  decodeString(input: string, webSafe: boolean): string;\n  decodeStringToByteArray(input: string, webSafe: boolean): number[];\n  init_(): void;\n}\n\n// We define it as an object literal instead of a class because a class compiled down to es5 can't\n// be treeshaked. https://github.com/rollup/rollup/issues/1691\n// Static lookup maps, lazily populated by init_()\nexport const base64: Base64 = {\n  /**\n   * Maps bytes to characters.\n   */\n  byteToCharMap_: null,\n\n  /**\n   * Maps characters to bytes.\n   */\n  charToByteMap_: null,\n\n  /**\n   * Maps bytes to websafe characters.\n   * @private\n   */\n  byteToCharMapWebSafe_: null,\n\n  /**\n   * Maps websafe characters to bytes.\n   * @private\n   */\n  charToByteMapWebSafe_: null,\n\n  /**\n   * Our default alphabet, shared between\n   * ENCODED_VALS and ENCODED_VALS_WEBSAFE\n   */\n  ENCODED_VALS_BASE:\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',\n\n  /**\n   * Our default alphabet. Value 64 (=) is special; it means \"nothing.\"\n   */\n  get ENCODED_VALS() {\n    return this.ENCODED_VALS_BASE + '+/=';\n  },\n\n  /**\n   * Our websafe alphabet.\n   */\n  get ENCODED_VALS_WEBSAFE() {\n    return this.ENCODED_VALS_BASE + '-_.';\n  },\n\n  /**\n   * Whether this browser supports the atob and btoa functions. This extension\n   * started at Mozilla but is now implemented by many browsers. We use the\n   * ASSUME_* variables to avoid pulling in the full useragent detection library\n   * but still allowing the standard per-browser compilations.\n   *\n   */\n  HAS_NATIVE_SUPPORT: typeof atob === 'function',\n\n  /**\n   * Base64-encode an array of bytes.\n   *\n   * @param input An array of bytes (numbers with\n   *     value in [0, 255]) to encode.\n   * @param webSafe Boolean indicating we should use the\n   *     alternative alphabet.\n   * @return The base64 encoded string.\n   */\n  encodeByteArray(input: number[] | Uint8Array, webSafe?: boolean): string {\n    if (!Array.isArray(input)) {\n      throw Error('encodeByteArray takes an array as a parameter');\n    }\n\n    this.init_();\n\n    const byteToCharMap = webSafe\n      ? this.byteToCharMapWebSafe_!\n      : this.byteToCharMap_!;\n\n    const output = [];\n\n    for (let i = 0; i < input.length; i += 3) {\n      const byte1 = input[i];\n      const haveByte2 = i + 1 < input.length;\n      const byte2 = haveByte2 ? input[i + 1] : 0;\n      const haveByte3 = i + 2 < input.length;\n      const byte3 = haveByte3 ? input[i + 2] : 0;\n\n      const outByte1 = byte1 >> 2;\n      const outByte2 = ((byte1 & 0x03) << 4) | (byte2 >> 4);\n      let outByte3 = ((byte2 & 0x0f) << 2) | (byte3 >> 6);\n      let outByte4 = byte3 & 0x3f;\n\n      if (!haveByte3) {\n        outByte4 = 64;\n\n        if (!haveByte2) {\n          outByte3 = 64;\n        }\n      }\n\n      output.push(\n        byteToCharMap[outByte1],\n        byteToCharMap[outByte2],\n        byteToCharMap[outByte3],\n        byteToCharMap[outByte4]\n      );\n    }\n\n    return output.join('');\n  },\n\n  /**\n   * Base64-encode a string.\n   *\n   * @param input A string to encode.\n   * @param webSafe If true, we should use the\n   *     alternative alphabet.\n   * @return The base64 encoded string.\n   */\n  encodeString(input: string, webSafe?: boolean): string {\n    // Shortcut for Mozilla browsers that implement\n    // a native base64 encoder in the form of \"btoa/atob\"\n    if (this.HAS_NATIVE_SUPPORT && !webSafe) {\n      return btoa(input);\n    }\n    return this.encodeByteArray(stringToByteArray(input), webSafe);\n  },\n\n  /**\n   * Base64-decode a string.\n   *\n   * @param input to decode.\n   * @param webSafe True if we should use the\n   *     alternative alphabet.\n   * @return string representing the decoded value.\n   */\n  decodeString(input: string, webSafe: boolean): string {\n    // Shortcut for Mozilla browsers that implement\n    // a native base64 encoder in the form of \"btoa/atob\"\n    if (this.HAS_NATIVE_SUPPORT && !webSafe) {\n      return atob(input);\n    }\n    return byteArrayToString(this.decodeStringToByteArray(input, webSafe));\n  },\n\n  /**\n   * Base64-decode a string.\n   *\n   * In base-64 decoding, groups of four characters are converted into three\n   * bytes.  If the encoder did not apply padding, the input length may not\n   * be a multiple of 4.\n   *\n   * In this case, the last group will have fewer than 4 characters, and\n   * padding will be inferred.  If the group has one or two characters, it decodes\n   * to one byte.  If the group has three characters, it decodes to two bytes.\n   *\n   * @param input Input to decode.\n   * @param webSafe True if we should use the web-safe alphabet.\n   * @return bytes representing the decoded value.\n   */\n  decodeStringToByteArray(input: string, webSafe: boolean): number[] {\n    this.init_();\n\n    const charToByteMap = webSafe\n      ? this.charToByteMapWebSafe_!\n      : this.charToByteMap_!;\n\n    const output: number[] = [];\n\n    for (let i = 0; i < input.length; ) {\n      const byte1 = charToByteMap[input.charAt(i++)];\n\n      const haveByte2 = i < input.length;\n      const byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;\n      ++i;\n\n      const haveByte3 = i < input.length;\n      const byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;\n      ++i;\n\n      const haveByte4 = i < input.length;\n      const byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;\n      ++i;\n\n      if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {\n        throw Error();\n      }\n\n      const outByte1 = (byte1 << 2) | (byte2 >> 4);\n      output.push(outByte1);\n\n      if (byte3 !== 64) {\n        const outByte2 = ((byte2 << 4) & 0xf0) | (byte3 >> 2);\n        output.push(outByte2);\n\n        if (byte4 !== 64) {\n          const outByte3 = ((byte3 << 6) & 0xc0) | byte4;\n          output.push(outByte3);\n        }\n      }\n    }\n\n    return output;\n  },\n\n  /**\n   * Lazy static initialization function. Called before\n   * accessing any of the static map variables.\n   * @private\n   */\n  init_() {\n    if (!this.byteToCharMap_) {\n      this.byteToCharMap_ = {};\n      this.charToByteMap_ = {};\n      this.byteToCharMapWebSafe_ = {};\n      this.charToByteMapWebSafe_ = {};\n\n      // We want quick mappings back and forth, so we precompute two maps.\n      for (let i = 0; i < this.ENCODED_VALS.length; i++) {\n        this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);\n        this.charToByteMap_[this.byteToCharMap_[i]] = i;\n        this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);\n        this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;\n\n        // Be forgiving when decoding and correctly decode both encodings.\n        if (i >= this.ENCODED_VALS_BASE.length) {\n          this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;\n          this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;\n        }\n      }\n    }\n  }\n};\n\n/**\n * URL-safe base64 encoding\n */\nexport const base64Encode = function (str: string): string {\n  const utf8Bytes = stringToByteArray(str);\n  return base64.encodeByteArray(utf8Bytes, true);\n};\n\n/**\n * URL-safe base64 encoding (without \".\" padding in the end).\n * e.g. Used in JSON Web Token (JWT) parts.\n */\nexport const base64urlEncodeWithoutPadding = function (str: string): string {\n  // Use base64url encoding and remove padding in the end (dot characters).\n  return base64Encode(str).replace(/\\./g, '');\n};\n\n/**\n * URL-safe base64 decoding\n *\n * NOTE: DO NOT use the global atob() function - it does NOT support the\n * base64Url variant encoding.\n *\n * @param str To be decoded\n * @return Decoded result, if possible\n */\nexport const base64Decode = function (str: string): string | null {\n  try {\n    return base64.decodeString(str, true);\n  } catch (e) {\n    console.error('base64Decode failed: ', e);\n  }\n  return null;\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Standardized Firebase Error.\n *\n * Usage:\n *\n *   // Typescript string literals for type-safe codes\n *   type Err =\n *     'unknown' |\n *     'object-not-found'\n *     ;\n *\n *   // Closure enum for type-safe error codes\n *   // at-enum {string}\n *   var Err = {\n *     UNKNOWN: 'unknown',\n *     OBJECT_NOT_FOUND: 'object-not-found',\n *   }\n *\n *   let errors: Map<Err, string> = {\n *     'generic-error': \"Unknown error\",\n *     'file-not-found': \"Could not find file: {$file}\",\n *   };\n *\n *   // Type-safe function - must pass a valid error code as param.\n *   let error = new ErrorFactory<Err>('service', 'Service', errors);\n *\n *   ...\n *   throw error.create(Err.GENERIC);\n *   ...\n *   throw error.create(Err.FILE_NOT_FOUND, {'file': fileName});\n *   ...\n *   // Service: Could not file file: foo.txt (service/file-not-found).\n *\n *   catch (e) {\n *     assert(e.message === \"Could not find file: foo.txt.\");\n *     if (e.code === 'service/file-not-found') {\n *       console.log(\"Could not read file: \" + e['file']);\n *     }\n *   }\n */\n\nexport type ErrorMap<ErrorCode extends string> = {\n  readonly [K in ErrorCode]: string;\n};\n\nconst ERROR_NAME = 'FirebaseError';\n\nexport interface StringLike {\n  toString(): string;\n}\n\nexport interface ErrorData {\n  [key: string]: unknown;\n}\n\n// Based on code from:\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types\nexport class FirebaseError extends Error {\n  readonly name = ERROR_NAME;\n\n  constructor(\n    readonly code: string,\n    message: string,\n    public customData?: Record<string, unknown>\n  ) {\n    super(message);\n\n    // Fix For ES5\n    // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    Object.setPrototypeOf(this, FirebaseError.prototype);\n\n    // Maintains proper stack trace for where our error was thrown.\n    // Only available on V8.\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, ErrorFactory.prototype.create);\n    }\n  }\n}\n\nexport class ErrorFactory<\n  ErrorCode extends string,\n  ErrorParams extends { readonly [K in ErrorCode]?: ErrorData } = {}\n> {\n  constructor(\n    private readonly service: string,\n    private readonly serviceName: string,\n    private readonly errors: ErrorMap<ErrorCode>\n  ) {}\n\n  create<K extends ErrorCode>(\n    code: K,\n    ...data: K extends keyof ErrorParams ? [ErrorParams[K]] : []\n  ): FirebaseError {\n    const customData = (data[0] as ErrorData) || {};\n    const fullCode = `${this.service}/${code}`;\n    const template = this.errors[code];\n\n    const message = template ? replaceTemplate(template, customData) : 'Error';\n    // Service Name: Error message (service/code).\n    const fullMessage = `${this.serviceName}: ${message} (${fullCode}).`;\n\n    const error = new FirebaseError(fullCode, fullMessage, customData);\n\n    return error;\n  }\n}\n\nfunction replaceTemplate(template: string, data: ErrorData): string {\n  return template.replace(PATTERN, (_, key) => {\n    const value = data[key];\n    return value != null ? String(value) : `<${key}?>`;\n  });\n}\n\nconst PATTERN = /\\{\\$([^}]+)}/g;\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport interface Compat<T> {\n  _delegate: T;\n}\n\nexport function getModularInstance<ExpService>(\n  service: Compat<ExpService> | ExpService\n): ExpService {\n  if (service && (service as Compat<ExpService>)._delegate) {\n    return (service as Compat<ExpService>)._delegate;\n  } else {\n    return service as ExpService;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  InstantiationMode,\n  InstanceFactory,\n  ComponentType,\n  Dictionary,\n  Name,\n  onInstanceCreatedCallback\n} from './types';\n\n/**\n * Component for service name T, e.g. `auth`, `auth-internal`\n */\nexport class Component<T extends Name = Name> {\n  multipleInstances = false;\n  /**\n   * Properties to be added to the service namespace\n   */\n  serviceProps: Dictionary = {};\n\n  instantiationMode = InstantiationMode.LAZY;\n\n  onInstanceCreated: onInstanceCreatedCallback<T> | null = null;\n\n  /**\n   *\n   * @param name The public service name, e.g. app, auth, firestore, database\n   * @param instanceFactory Service factory responsible for creating the public interface\n   * @param type whether the service provided by the component is public or private\n   */\n  constructor(\n    readonly name: T,\n    readonly instanceFactory: InstanceFactory<T>,\n    readonly type: ComponentType\n  ) {}\n\n  setInstantiationMode(mode: InstantiationMode): this {\n    this.instantiationMode = mode;\n    return this;\n  }\n\n  setMultipleInstances(multipleInstances: boolean): this {\n    this.multipleInstances = multipleInstances;\n    return this;\n  }\n\n  setServiceProps(props: Dictionary): this {\n    this.serviceProps = props;\n    return this;\n  }\n\n  setInstanceCreatedCallback(callback: onInstanceCreatedCallback<T>): this {\n    this.onInstanceCreated = callback;\n    return this;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Constants used in the Firebase Storage library.\n */\n\n/**\n * Domain name for firebase storage.\n */\nexport const DEFAULT_HOST = 'firebasestorage.googleapis.com';\n\n/**\n * The key in Firebase config json for the storage bucket.\n */\nexport const CONFIG_STORAGE_BUCKET_KEY = 'storageBucket';\n\n/**\n * 2 minutes\n *\n * The timeout for all operations except upload.\n */\nexport const DEFAULT_MAX_OPERATION_RETRY_TIME = 2 * 60 * 1000;\n\n/**\n * 10 minutes\n *\n * The timeout for upload.\n */\nexport const DEFAULT_MAX_UPLOAD_RETRY_TIME = 10 * 60 * 1000;\n\n/**\n * This is the value of Number.MIN_SAFE_INTEGER, which is not well supported\n * enough for us to use it directly.\n */\nexport const MIN_SAFE_INTEGER = -9007199254740991;\n","import { FirebaseError } from '@firebase/util';\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { CONFIG_STORAGE_BUCKET_KEY } from './constants';\n\n/**\n * An error returned by the Firebase Storage SDK.\n * @public\n */\nexport class StorageError extends FirebaseError {\n  private readonly _baseMessage: string;\n  /**\n   * Stores custom error data unque to StorageError.\n   */\n  customData: { serverResponse: string | null } = { serverResponse: null };\n\n  /**\n   * @param code - A StorageErrorCode string to be prefixed with 'storage/' and\n   *  added to the end of the message.\n   * @param message  - Error message.\n   */\n  constructor(code: StorageErrorCode, message: string) {\n    super(\n      prependCode(code),\n      `Firebase Storage: ${message} (${prependCode(code)})`\n    );\n    this._baseMessage = this.message;\n    // Without this, `instanceof StorageError`, in tests for example,\n    // returns false.\n    Object.setPrototypeOf(this, StorageError.prototype);\n  }\n\n  /**\n   * Compares a StorageErrorCode against this error's code, filtering out the prefix.\n   */\n  _codeEquals(code: StorageErrorCode): boolean {\n    return prependCode(code) === this.code;\n  }\n\n  /**\n   * Optional response message that was added by the server.\n   */\n  get serverResponse(): null | string {\n    return this.customData.serverResponse;\n  }\n\n  set serverResponse(serverResponse: string | null) {\n    this.customData.serverResponse = serverResponse;\n    if (this.customData.serverResponse) {\n      this.message = `${this._baseMessage}\\n${this.customData.serverResponse}`;\n    } else {\n      this.message = this._baseMessage;\n    }\n  }\n}\n\nexport const errors = {};\n\n/**\n * @public\n * Error codes that can be attached to `StorageError`s.\n */\nexport const enum StorageErrorCode {\n  // Shared between all platforms\n  UNKNOWN = 'unknown',\n  OBJECT_NOT_FOUND = 'object-not-found',\n  BUCKET_NOT_FOUND = 'bucket-not-found',\n  PROJECT_NOT_FOUND = 'project-not-found',\n  QUOTA_EXCEEDED = 'quota-exceeded',\n  UNAUTHENTICATED = 'unauthenticated',\n  UNAUTHORIZED = 'unauthorized',\n  UNAUTHORIZED_APP = 'unauthorized-app',\n  RETRY_LIMIT_EXCEEDED = 'retry-limit-exceeded',\n  INVALID_CHECKSUM = 'invalid-checksum',\n  CANCELED = 'canceled',\n  // JS specific\n  INVALID_EVENT_NAME = 'invalid-event-name',\n  INVALID_URL = 'invalid-url',\n  INVALID_DEFAULT_BUCKET = 'invalid-default-bucket',\n  NO_DEFAULT_BUCKET = 'no-default-bucket',\n  CANNOT_SLICE_BLOB = 'cannot-slice-blob',\n  SERVER_FILE_WRONG_SIZE = 'server-file-wrong-size',\n  NO_DOWNLOAD_URL = 'no-download-url',\n  INVALID_ARGUMENT = 'invalid-argument',\n  INVALID_ARGUMENT_COUNT = 'invalid-argument-count',\n  APP_DELETED = 'app-deleted',\n  INVALID_ROOT_OPERATION = 'invalid-root-operation',\n  INVALID_FORMAT = 'invalid-format',\n  INTERNAL_ERROR = 'internal-error',\n  UNSUPPORTED_ENVIRONMENT = 'unsupported-environment'\n}\n\nexport function prependCode(code: StorageErrorCode): string {\n  return 'storage/' + code;\n}\n\nexport function unknown(): StorageError {\n  const message =\n    'An unknown error occurred, please check the error payload for ' +\n    'server response.';\n  return new StorageError(StorageErrorCode.UNKNOWN, message);\n}\n\nexport function objectNotFound(path: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.OBJECT_NOT_FOUND,\n    \"Object '\" + path + \"' does not exist.\"\n  );\n}\n\nexport function bucketNotFound(bucket: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.BUCKET_NOT_FOUND,\n    \"Bucket '\" + bucket + \"' does not exist.\"\n  );\n}\n\nexport function projectNotFound(project: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.PROJECT_NOT_FOUND,\n    \"Project '\" + project + \"' does not exist.\"\n  );\n}\n\nexport function quotaExceeded(bucket: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.QUOTA_EXCEEDED,\n    \"Quota for bucket '\" +\n      bucket +\n      \"' exceeded, please view quota on \" +\n      'https://firebase.google.com/pricing/.'\n  );\n}\n\nexport function unauthenticated(): StorageError {\n  const message =\n    'User is not authenticated, please authenticate using Firebase ' +\n    'Authentication and try again.';\n  return new StorageError(StorageErrorCode.UNAUTHENTICATED, message);\n}\n\nexport function unauthorizedApp(): StorageError {\n  return new StorageError(\n    StorageErrorCode.UNAUTHORIZED_APP,\n    'This app does not have permission to access Firebase Storage on this project.'\n  );\n}\n\nexport function unauthorized(path: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.UNAUTHORIZED,\n    \"User does not have permission to access '\" + path + \"'.\"\n  );\n}\n\nexport function retryLimitExceeded(): StorageError {\n  return new StorageError(\n    StorageErrorCode.RETRY_LIMIT_EXCEEDED,\n    'Max retry time for operation exceeded, please try again.'\n  );\n}\n\nexport function invalidChecksum(\n  path: string,\n  checksum: string,\n  calculated: string\n): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_CHECKSUM,\n    \"Uploaded/downloaded object '\" +\n      path +\n      \"' has checksum '\" +\n      checksum +\n      \"' which does not match '\" +\n      calculated +\n      \"'. Please retry the upload/download.\"\n  );\n}\n\nexport function canceled(): StorageError {\n  return new StorageError(\n    StorageErrorCode.CANCELED,\n    'User canceled the upload/download.'\n  );\n}\n\nexport function invalidEventName(name: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_EVENT_NAME,\n    \"Invalid event name '\" + name + \"'.\"\n  );\n}\n\nexport function invalidUrl(url: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_URL,\n    \"Invalid URL '\" + url + \"'.\"\n  );\n}\n\nexport function invalidDefaultBucket(bucket: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_DEFAULT_BUCKET,\n    \"Invalid default bucket '\" + bucket + \"'.\"\n  );\n}\n\nexport function noDefaultBucket(): StorageError {\n  return new StorageError(\n    StorageErrorCode.NO_DEFAULT_BUCKET,\n    'No default bucket ' +\n      \"found. Did you set the '\" +\n      CONFIG_STORAGE_BUCKET_KEY +\n      \"' property when initializing the app?\"\n  );\n}\n\nexport function cannotSliceBlob(): StorageError {\n  return new StorageError(\n    StorageErrorCode.CANNOT_SLICE_BLOB,\n    'Cannot slice blob for upload. Please retry the upload.'\n  );\n}\n\nexport function serverFileWrongSize(): StorageError {\n  return new StorageError(\n    StorageErrorCode.SERVER_FILE_WRONG_SIZE,\n    'Server recorded incorrect upload file size, please retry the upload.'\n  );\n}\n\nexport function noDownloadURL(): StorageError {\n  return new StorageError(\n    StorageErrorCode.NO_DOWNLOAD_URL,\n    'The given file does not have any download URLs.'\n  );\n}\n\n/**\n * @internal\n */\nexport function invalidArgument(message: string): StorageError {\n  return new StorageError(StorageErrorCode.INVALID_ARGUMENT, message);\n}\n\nexport function invalidArgumentCount(\n  argMin: number,\n  argMax: number,\n  fnName: string,\n  real: number\n): StorageError {\n  let countPart;\n  let plural;\n  if (argMin === argMax) {\n    countPart = argMin;\n    plural = argMin === 1 ? 'argument' : 'arguments';\n  } else {\n    countPart = 'between ' + argMin + ' and ' + argMax;\n    plural = 'arguments';\n  }\n  return new StorageError(\n    StorageErrorCode.INVALID_ARGUMENT_COUNT,\n    'Invalid argument count in `' +\n      fnName +\n      '`: Expected ' +\n      countPart +\n      ' ' +\n      plural +\n      ', received ' +\n      real +\n      '.'\n  );\n}\n\nexport function appDeleted(): StorageError {\n  return new StorageError(\n    StorageErrorCode.APP_DELETED,\n    'The Firebase app was deleted.'\n  );\n}\n\n/**\n * @param name - The name of the operation that was invalid.\n *\n * @internal\n */\nexport function invalidRootOperation(name: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_ROOT_OPERATION,\n    \"The operation '\" +\n      name +\n      \"' cannot be performed on a root reference, create a non-root \" +\n      \"reference using child, such as .child('file.png').\"\n  );\n}\n\n/**\n * @param format - The format that was not valid.\n * @param message - A message describing the format violation.\n */\nexport function invalidFormat(format: string, message: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_FORMAT,\n    \"String does not match format '\" + format + \"': \" + message\n  );\n}\n\n/**\n * @param message - A message describing the internal error.\n */\nexport function unsupportedEnvironment(message: string): StorageError {\n  throw new StorageError(StorageErrorCode.UNSUPPORTED_ENVIRONMENT, message);\n}\n\n/**\n * @param message - A message describing the internal error.\n */\nexport function internalError(message: string): StorageError {\n  throw new StorageError(\n    StorageErrorCode.INTERNAL_ERROR,\n    'Internal error: ' + message\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Functionality related to the parsing/composition of bucket/\n * object location.\n */\n\nimport { invalidDefaultBucket, invalidUrl } from './error';\nimport { DEFAULT_HOST } from './constants';\n\n/**\n * Firebase Storage location data.\n *\n * @internal\n */\nexport class Location {\n  private path_: string;\n\n  constructor(public readonly bucket: string, path: string) {\n    this.path_ = path;\n  }\n\n  get path(): string {\n    return this.path_;\n  }\n\n  get isRoot(): boolean {\n    return this.path.length === 0;\n  }\n\n  fullServerUrl(): string {\n    const encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);\n  }\n\n  bucketOnlyServerUrl(): string {\n    const encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o';\n  }\n\n  static makeFromBucketSpec(bucketString: string, host: string): Location {\n    let bucketLocation;\n    try {\n      bucketLocation = Location.makeFromUrl(bucketString, host);\n    } catch (e) {\n      // Not valid URL, use as-is. This lets you put bare bucket names in\n      // config.\n      return new Location(bucketString, '');\n    }\n    if (bucketLocation.path === '') {\n      return bucketLocation;\n    } else {\n      throw invalidDefaultBucket(bucketString);\n    }\n  }\n\n  static makeFromUrl(url: string, host: string): Location {\n    let location: Location | null = null;\n    const bucketDomain = '([A-Za-z0-9.\\\\-_]+)';\n\n    function gsModify(loc: Location): void {\n      if (loc.path.charAt(loc.path.length - 1) === '/') {\n        loc.path_ = loc.path_.slice(0, -1);\n      }\n    }\n    const gsPath = '(/(.*))?$';\n    const gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');\n    const gsIndices = { bucket: 1, path: 3 };\n\n    function httpModify(loc: Location): void {\n      loc.path_ = decodeURIComponent(loc.path);\n    }\n    const version = 'v[A-Za-z0-9_]+';\n    const firebaseStorageHost = host.replace(/[.]/g, '\\\\.');\n    const firebaseStoragePath = '(/([^?#]*).*)?$';\n    const firebaseStorageRegExp = new RegExp(\n      `^https?://${firebaseStorageHost}/${version}/b/${bucketDomain}/o${firebaseStoragePath}`,\n      'i'\n    );\n    const firebaseStorageIndices = { bucket: 1, path: 3 };\n\n    const cloudStorageHost =\n      host === DEFAULT_HOST\n        ? '(?:storage.googleapis.com|storage.cloud.google.com)'\n        : host;\n    const cloudStoragePath = '([^?#]*)';\n    const cloudStorageRegExp = new RegExp(\n      `^https?://${cloudStorageHost}/${bucketDomain}/${cloudStoragePath}`,\n      'i'\n    );\n    const cloudStorageIndices = { bucket: 1, path: 2 };\n\n    const groups = [\n      { regex: gsRegex, indices: gsIndices, postModify: gsModify },\n      {\n        regex: firebaseStorageRegExp,\n        indices: firebaseStorageIndices,\n        postModify: httpModify\n      },\n      {\n        regex: cloudStorageRegExp,\n        indices: cloudStorageIndices,\n        postModify: httpModify\n      }\n    ];\n    for (let i = 0; i < groups.length; i++) {\n      const group = groups[i];\n      const captures = group.regex.exec(url);\n      if (captures) {\n        const bucketValue = captures[group.indices.bucket];\n        let pathValue = captures[group.indices.path];\n        if (!pathValue) {\n          pathValue = '';\n        }\n        location = new Location(bucketValue, pathValue);\n        group.postModify(location);\n        break;\n      }\n    }\n    if (location == null) {\n      throw invalidUrl(url);\n    }\n    return location;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { StorageError } from './error';\nimport { Request } from './request';\n\n/**\n * A request whose promise always fails.\n */\nexport class FailRequest<T> implements Request<T> {\n  promise_: Promise<T>;\n\n  constructor(error: StorageError) {\n    this.promise_ = Promise.reject<T>(error);\n  }\n\n  /** @inheritDoc */\n  getPromise(): Promise<T> {\n    return this.promise_;\n  }\n\n  /** @inheritDoc */\n  cancel(_appDelete = false): void {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { invalidArgument } from './error';\n\nexport function isJustDef<T>(p: T | null | undefined): p is T | null {\n  return p !== void 0;\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function isFunction(p: unknown): p is Function {\n  return typeof p === 'function';\n}\n\nexport function isNonArrayObject(p: unknown): boolean {\n  return typeof p === 'object' && !Array.isArray(p);\n}\n\nexport function isString(p: unknown): p is string {\n  return typeof p === 'string' || p instanceof String;\n}\n\nexport function isNativeBlob(p: unknown): p is Blob {\n  return isNativeBlobDefined() && p instanceof Blob;\n}\n\nexport function isNativeBlobDefined(): boolean {\n  return typeof Blob !== 'undefined';\n}\n\nexport function validateNumber(\n  argument: string,\n  minValue: number,\n  maxValue: number,\n  value: number\n): void {\n  if (value < minValue) {\n    throw invalidArgument(\n      `Invalid value for '${argument}'. Expected ${minValue} or greater.`\n    );\n  }\n  if (value > maxValue) {\n    throw invalidArgument(\n      `Invalid value for '${argument}'. Expected ${maxValue} or less.`\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Functions to create and manipulate URLs for the server API.\n */\nimport { UrlParams } from './requestinfo';\n\nexport function makeUrl(\n  urlPart: string,\n  host: string,\n  protocol: string\n): string {\n  let origin = host;\n  if (protocol == null) {\n    origin = `https://${host}`;\n  }\n  return `${protocol}://${origin}/v0${urlPart}`;\n}\n\nexport function makeQueryString(params: UrlParams): string {\n  const encode = encodeURIComponent;\n  let queryPart = '?';\n  for (const key in params) {\n    if (params.hasOwnProperty(key)) {\n      const nextPart = encode(key) + '=' + encode(params[key]);\n      queryPart = queryPart + nextPart + '&';\n    }\n  }\n\n  // Chop off the extra '&' or '?' on the end\n  queryPart = queryPart.slice(0, -1);\n  return queryPart;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines methods used to actually send HTTP requests from\n * abstract representations.\n */\n\nimport { start, stop, id as backoffId } from './backoff';\nimport {\n  StorageError,\n  unknown,\n  appDeleted,\n  canceled,\n  retryLimitExceeded\n} from './error';\nimport { RequestHandler, RequestInfo } from './requestinfo';\nimport { isJustDef } from './type';\nimport { makeQueryString } from './url';\nimport { Headers, Connection, ErrorCode } from './connection';\n\nexport interface Request<T> {\n  getPromise(): Promise<T>;\n\n  /**\n   * Cancels the request. IMPORTANT: the promise may still be resolved with an\n   * appropriate value (if the request is finished before you call this method,\n   * but the promise has not yet been resolved), so don't just assume it will be\n   * rejected if you call this function.\n   * @param appDelete - True if the cancelation came from the app being deleted.\n   */\n  cancel(appDelete?: boolean): void;\n}\n\nclass NetworkRequest<T> implements Request<T> {\n  private pendingConnection_: Connection | null = null;\n  private backoffId_: backoffId | null = null;\n  private resolve_!: (value?: T | PromiseLike<T>) => void;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private reject_!: (reason?: any) => void;\n  private canceled_: boolean = false;\n  private appDelete_: boolean = false;\n  promise_: Promise<T>;\n\n  constructor(\n    private url_: string,\n    private method_: string,\n    private headers_: Headers,\n    private body_: string | Blob | Uint8Array | null,\n    private successCodes_: number[],\n    private additionalRetryCodes_: number[],\n    private callback_: RequestHandler<string, T>,\n    private errorCallback_: RequestHandler<StorageError, StorageError> | null,\n    private timeout_: number,\n    private progressCallback_: ((p1: number, p2: number) => void) | null,\n    private connectionFactory_: () => Connection\n  ) {\n    this.promise_ = new Promise((resolve, reject) => {\n      this.resolve_ = resolve as (value?: T | PromiseLike<T>) => void;\n      this.reject_ = reject;\n      this.start_();\n    });\n  }\n\n  /**\n   * Actually starts the retry loop.\n   */\n  private start_(): void {\n    const doTheRequest: (\n      backoffCallback: (success: boolean, ...p2: unknown[]) => void,\n      canceled: boolean\n    ) => void = (backoffCallback, canceled) => {\n      if (canceled) {\n        backoffCallback(false, new RequestEndStatus(false, null, true));\n        return;\n      }\n      const connection = this.connectionFactory_();\n      this.pendingConnection_ = connection;\n\n      const progressListener: (progressEvent: ProgressEvent) => void =\n        progressEvent => {\n          const loaded = progressEvent.loaded;\n          const total = progressEvent.lengthComputable\n            ? progressEvent.total\n            : -1;\n          if (this.progressCallback_ !== null) {\n            this.progressCallback_(loaded, total);\n          }\n        };\n      if (this.progressCallback_ !== null) {\n        connection.addUploadProgressListener(progressListener);\n      }\n\n      // connection.send() never rejects, so we don't need to have a error handler or use catch on the returned promise.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      connection\n        .send(this.url_, this.method_, this.body_, this.headers_)\n        .then(() => {\n          if (this.progressCallback_ !== null) {\n            connection.removeUploadProgressListener(progressListener);\n          }\n          this.pendingConnection_ = null;\n          const hitServer = connection.getErrorCode() === ErrorCode.NO_ERROR;\n          const status = connection.getStatus();\n          if (!hitServer || this.isRetryStatusCode_(status)) {\n            const wasCanceled = connection.getErrorCode() === ErrorCode.ABORT;\n            backoffCallback(\n              false,\n              new RequestEndStatus(false, null, wasCanceled)\n            );\n            return;\n          }\n          const successCode = this.successCodes_.indexOf(status) !== -1;\n          backoffCallback(true, new RequestEndStatus(successCode, connection));\n        });\n    };\n\n    /**\n     * @param requestWentThrough - True if the request eventually went\n     *     through, false if it hit the retry limit or was canceled.\n     */\n    const backoffDone: (\n      requestWentThrough: boolean,\n      status: RequestEndStatus\n    ) => void = (requestWentThrough, status) => {\n      const resolve = this.resolve_;\n      const reject = this.reject_;\n      const connection = status.connection as Connection;\n      if (status.wasSuccessCode) {\n        try {\n          const result = this.callback_(\n            connection,\n            connection.getResponseText()\n          );\n          if (isJustDef(result)) {\n            resolve(result);\n          } else {\n            resolve();\n          }\n        } catch (e) {\n          reject(e);\n        }\n      } else {\n        if (connection !== null) {\n          const err = unknown();\n          err.serverResponse = connection.getResponseText();\n          if (this.errorCallback_) {\n            reject(this.errorCallback_(connection, err));\n          } else {\n            reject(err);\n          }\n        } else {\n          if (status.canceled) {\n            const err = this.appDelete_ ? appDeleted() : canceled();\n            reject(err);\n          } else {\n            const err = retryLimitExceeded();\n            reject(err);\n          }\n        }\n      }\n    };\n    if (this.canceled_) {\n      backoffDone(false, new RequestEndStatus(false, null, true));\n    } else {\n      this.backoffId_ = start(doTheRequest, backoffDone, this.timeout_);\n    }\n  }\n\n  /** @inheritDoc */\n  getPromise(): Promise<T> {\n    return this.promise_;\n  }\n\n  /** @inheritDoc */\n  cancel(appDelete?: boolean): void {\n    this.canceled_ = true;\n    this.appDelete_ = appDelete || false;\n    if (this.backoffId_ !== null) {\n      stop(this.backoffId_);\n    }\n    if (this.pendingConnection_ !== null) {\n      this.pendingConnection_.abort();\n    }\n  }\n\n  private isRetryStatusCode_(status: number): boolean {\n    // The codes for which to retry came from this page:\n    // https://cloud.google.com/storage/docs/exponential-backoff\n    const isFiveHundredCode = status >= 500 && status < 600;\n    const extraRetryCodes = [\n      // Request Timeout: web server didn't receive full request in time.\n      408,\n      // Too Many Requests: you're getting rate-limited, basically.\n      429\n    ];\n    const isExtraRetryCode = extraRetryCodes.indexOf(status) !== -1;\n    const isRequestSpecificRetryCode =\n      this.additionalRetryCodes_.indexOf(status) !== -1;\n    return isFiveHundredCode || isExtraRetryCode || isRequestSpecificRetryCode;\n  }\n}\n\n/**\n * A collection of information about the result of a network request.\n * @param opt_canceled - Defaults to false.\n */\nexport class RequestEndStatus {\n  /**\n   * True if the request was canceled.\n   */\n  canceled: boolean;\n\n  constructor(\n    public wasSuccessCode: boolean,\n    public connection: Connection | null,\n    canceled?: boolean\n  ) {\n    this.canceled = !!canceled;\n  }\n}\n\nexport function addAuthHeader_(\n  headers: Headers,\n  authToken: string | null\n): void {\n  if (authToken !== null && authToken.length > 0) {\n    headers['Authorization'] = 'Firebase ' + authToken;\n  }\n}\n\nexport function addVersionHeader_(\n  headers: Headers,\n  firebaseVersion?: string\n): void {\n  headers['X-Firebase-Storage-Version'] =\n    'webjs/' + (firebaseVersion ?? 'AppManager');\n}\n\nexport function addGmpidHeader_(headers: Headers, appId: string | null): void {\n  if (appId) {\n    headers['X-Firebase-GMPID'] = appId;\n  }\n}\n\nexport function addAppCheckHeader_(\n  headers: Headers,\n  appCheckToken: string | null\n): void {\n  if (appCheckToken !== null) {\n    headers['X-Firebase-AppCheck'] = appCheckToken;\n  }\n}\n\nexport function makeRequest<T>(\n  requestInfo: RequestInfo<T>,\n  appId: string | null,\n  authToken: string | null,\n  appCheckToken: string | null,\n  requestFactory: () => Connection,\n  firebaseVersion?: string\n): Request<T> {\n  const queryPart = makeQueryString(requestInfo.urlParams);\n  const url = requestInfo.url + queryPart;\n  const headers = Object.assign({}, requestInfo.headers);\n  addGmpidHeader_(headers, appId);\n  addAuthHeader_(headers, authToken);\n  addVersionHeader_(headers, firebaseVersion);\n  addAppCheckHeader_(headers, appCheckToken);\n  return new NetworkRequest<T>(\n    url,\n    requestInfo.method,\n    headers,\n    requestInfo.body,\n    requestInfo.successCodes,\n    requestInfo.additionalRetryCodes,\n    requestInfo.handler,\n    requestInfo.errorHandler,\n    requestInfo.timeout,\n    requestInfo.progressCallback,\n    requestFactory\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Provides a method for running a function with exponential\n * backoff.\n */\ntype id = (p1: boolean) => void;\n\nexport { id };\n\n/**\n * @param f May be invoked\n *     before the function returns.\n * @param callback Get all the arguments passed to the function\n *     passed to f, including the initial boolean.\n */\nexport function start(\n  f: (p1: (success: boolean) => void, canceled: boolean) => void,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  callback: (...args: any[]) => unknown,\n  timeout: number\n): id {\n  // TODO(andysoto): make this code cleaner (probably refactor into an actual\n  // type instead of a bunch of functions with state shared in the closure)\n  let waitSeconds = 1;\n  // Would type this as \"number\" but that doesn't work for Node so ¯\\_(ツ)_/¯\n  // TODO: find a way to exclude Node type definition for storage because storage only works in browser\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let retryTimeoutId: any = null;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let globalTimeoutId: any = null;\n  let hitTimeout = false;\n  let cancelState = 0;\n\n  function canceled(): boolean {\n    return cancelState === 2;\n  }\n  let triggeredCallback = false;\n\n  function triggerCallback(...args: any[]): void {\n    if (!triggeredCallback) {\n      triggeredCallback = true;\n      callback.apply(null, args);\n    }\n  }\n\n  function callWithDelay(millis: number): void {\n    retryTimeoutId = setTimeout(() => {\n      retryTimeoutId = null;\n      f(handler, canceled());\n    }, millis);\n  }\n\n  function clearGlobalTimeout(): void {\n    if (globalTimeoutId) {\n      clearTimeout(globalTimeoutId);\n    }\n  }\n\n  function handler(success: boolean, ...args: any[]): void {\n    if (triggeredCallback) {\n      clearGlobalTimeout();\n      return;\n    }\n    if (success) {\n      clearGlobalTimeout();\n      triggerCallback.call(null, success, ...args);\n      return;\n    }\n    const mustStop = canceled() || hitTimeout;\n    if (mustStop) {\n      clearGlobalTimeout();\n      triggerCallback.call(null, success, ...args);\n      return;\n    }\n    if (waitSeconds < 64) {\n      /* TODO(andysoto): don't back off so quickly if we know we're offline. */\n      waitSeconds *= 2;\n    }\n    let waitMillis;\n    if (cancelState === 1) {\n      cancelState = 2;\n      waitMillis = 0;\n    } else {\n      waitMillis = (waitSeconds + Math.random()) * 1000;\n    }\n    callWithDelay(waitMillis);\n  }\n  let stopped = false;\n\n  function stop(wasTimeout: boolean): void {\n    if (stopped) {\n      return;\n    }\n    stopped = true;\n    clearGlobalTimeout();\n    if (triggeredCallback) {\n      return;\n    }\n    if (retryTimeoutId !== null) {\n      if (!wasTimeout) {\n        cancelState = 2;\n      }\n      clearTimeout(retryTimeoutId);\n      callWithDelay(0);\n    } else {\n      if (!wasTimeout) {\n        cancelState = 1;\n      }\n    }\n  }\n  callWithDelay(0);\n  globalTimeoutId = setTimeout(() => {\n    hitTimeout = true;\n    stop(true);\n  }, timeout);\n  return stop;\n}\n\n/**\n * Stops the retry loop from repeating.\n * If the function is currently \"in between\" retries, it is invoked immediately\n * with the second parameter as \"true\". Otherwise, it will be invoked once more\n * after the current invocation finishes iff the current invocation would have\n * triggered another retry.\n */\nexport function stop(id: id): void {\n  id(false);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Some methods copied from goog.fs.\n * We don't include goog.fs because it pulls in a bunch of Deferred code that\n * bloats the size of the released binary.\n */\nimport { isNativeBlobDefined } from './type';\nimport { StorageErrorCode, StorageError } from './error';\n\nfunction getBlobBuilder(): typeof IBlobBuilder | undefined {\n  if (typeof BlobBuilder !== 'undefined') {\n    return BlobBuilder;\n  } else if (typeof WebKitBlobBuilder !== 'undefined') {\n    return WebKitBlobBuilder;\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * Concatenates one or more values together and converts them to a Blob.\n *\n * @param args The values that will make up the resulting blob.\n * @return The blob.\n */\nexport function getBlob(...args: Array<string | Blob | ArrayBuffer>): Blob {\n  const BlobBuilder = getBlobBuilder();\n  if (BlobBuilder !== undefined) {\n    const bb = new BlobBuilder();\n    for (let i = 0; i < args.length; i++) {\n      bb.append(args[i]);\n    }\n    return bb.getBlob();\n  } else {\n    if (isNativeBlobDefined()) {\n      return new Blob(args);\n    } else {\n      throw new StorageError(\n        StorageErrorCode.UNSUPPORTED_ENVIRONMENT,\n        \"This browser doesn't seem to support creating Blobs\"\n      );\n    }\n  }\n}\n\n/**\n * Slices the blob. The returned blob contains data from the start byte\n * (inclusive) till the end byte (exclusive). Negative indices cannot be used.\n *\n * @param blob The blob to be sliced.\n * @param start Index of the starting byte.\n * @param end Index of the ending byte.\n * @return The blob slice or null if not supported.\n */\nexport function sliceBlob(blob: Blob, start: number, end: number): Blob | null {\n  if (blob.webkitSlice) {\n    return blob.webkitSlice(start, end);\n  } else if (blob.mozSlice) {\n    return blob.mozSlice(start, end);\n  } else if (blob.slice) {\n    return blob.slice(start, end);\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { unknown, invalidFormat } from './error';\nimport { decodeBase64 } from '../platform/base64';\n\n/**\n * An enumeration of the possible string formats for upload.\n * @public\n */\nexport type StringFormat = typeof StringFormat[keyof typeof StringFormat];\n/**\n * An enumeration of the possible string formats for upload.\n * @public\n */\nexport const StringFormat = {\n  /**\n   * Indicates the string should be interpreted \"raw\", that is, as normal text.\n   * The string will be interpreted as UTF-16, then uploaded as a UTF-8 byte\n   * sequence.\n   * Example: The string 'Hello! \\\\ud83d\\\\ude0a' becomes the byte sequence\n   * 48 65 6c 6c 6f 21 20 f0 9f 98 8a\n   */\n  RAW: 'raw',\n  /**\n   * Indicates the string should be interpreted as base64-encoded data.\n   * Padding characters (trailing '='s) are optional.\n   * Example: The string 'rWmO++E6t7/rlw==' becomes the byte sequence\n   * ad 69 8e fb e1 3a b7 bf eb 97\n   */\n  BASE64: 'base64',\n  /**\n   * Indicates the string should be interpreted as base64url-encoded data.\n   * Padding characters (trailing '='s) are optional.\n   * Example: The string 'rWmO--E6t7_rlw==' becomes the byte sequence\n   * ad 69 8e fb e1 3a b7 bf eb 97\n   */\n  BASE64URL: 'base64url',\n  /**\n   * Indicates the string is a data URL, such as one obtained from\n   * canvas.toDataURL().\n   * Example: the string 'data:application/octet-stream;base64,aaaa'\n   * becomes the byte sequence\n   * 69 a6 9a\n   * (the content-type \"application/octet-stream\" is also applied, but can\n   * be overridden in the metadata object).\n   */\n  DATA_URL: 'data_url'\n} as const;\n\nexport class StringData {\n  contentType: string | null;\n\n  constructor(public data: Uint8Array, contentType?: string | null) {\n    this.contentType = contentType || null;\n  }\n}\n\n/**\n * @internal\n */\nexport function dataFromString(\n  format: StringFormat,\n  stringData: string\n): StringData {\n  switch (format) {\n    case StringFormat.RAW:\n      return new StringData(utf8Bytes_(stringData));\n    case StringFormat.BASE64:\n    case StringFormat.BASE64URL:\n      return new StringData(base64Bytes_(format, stringData));\n    case StringFormat.DATA_URL:\n      return new StringData(\n        dataURLBytes_(stringData),\n        dataURLContentType_(stringData)\n      );\n    default:\n    // do nothing\n  }\n\n  // assert(false);\n  throw unknown();\n}\n\nexport function utf8Bytes_(value: string): Uint8Array {\n  const b: number[] = [];\n  for (let i = 0; i < value.length; i++) {\n    let c = value.charCodeAt(i);\n    if (c <= 127) {\n      b.push(c);\n    } else {\n      if (c <= 2047) {\n        b.push(192 | (c >> 6), 128 | (c & 63));\n      } else {\n        if ((c & 64512) === 55296) {\n          // The start of a surrogate pair.\n          const valid =\n            i < value.length - 1 && (value.charCodeAt(i + 1) & 64512) === 56320;\n          if (!valid) {\n            // The second surrogate wasn't there.\n            b.push(239, 191, 189);\n          } else {\n            const hi = c;\n            const lo = value.charCodeAt(++i);\n            c = 65536 | ((hi & 1023) << 10) | (lo & 1023);\n            b.push(\n              240 | (c >> 18),\n              128 | ((c >> 12) & 63),\n              128 | ((c >> 6) & 63),\n              128 | (c & 63)\n            );\n          }\n        } else {\n          if ((c & 64512) === 56320) {\n            // Invalid low surrogate.\n            b.push(239, 191, 189);\n          } else {\n            b.push(224 | (c >> 12), 128 | ((c >> 6) & 63), 128 | (c & 63));\n          }\n        }\n      }\n    }\n  }\n  return new Uint8Array(b);\n}\n\nexport function percentEncodedBytes_(value: string): Uint8Array {\n  let decoded;\n  try {\n    decoded = decodeURIComponent(value);\n  } catch (e) {\n    throw invalidFormat(StringFormat.DATA_URL, 'Malformed data URL.');\n  }\n  return utf8Bytes_(decoded);\n}\n\nexport function base64Bytes_(format: StringFormat, value: string): Uint8Array {\n  switch (format) {\n    case StringFormat.BASE64: {\n      const hasMinus = value.indexOf('-') !== -1;\n      const hasUnder = value.indexOf('_') !== -1;\n      if (hasMinus || hasUnder) {\n        const invalidChar = hasMinus ? '-' : '_';\n        throw invalidFormat(\n          format,\n          \"Invalid character '\" +\n            invalidChar +\n            \"' found: is it base64url encoded?\"\n        );\n      }\n      break;\n    }\n    case StringFormat.BASE64URL: {\n      const hasPlus = value.indexOf('+') !== -1;\n      const hasSlash = value.indexOf('/') !== -1;\n      if (hasPlus || hasSlash) {\n        const invalidChar = hasPlus ? '+' : '/';\n        throw invalidFormat(\n          format,\n          \"Invalid character '\" + invalidChar + \"' found: is it base64 encoded?\"\n        );\n      }\n      value = value.replace(/-/g, '+').replace(/_/g, '/');\n      break;\n    }\n    default:\n    // do nothing\n  }\n  let bytes;\n  try {\n    bytes = decodeBase64(value);\n  } catch (e) {\n    throw invalidFormat(format, 'Invalid character found');\n  }\n  const array = new Uint8Array(bytes.length);\n  for (let i = 0; i < bytes.length; i++) {\n    array[i] = bytes.charCodeAt(i);\n  }\n  return array;\n}\n\nclass DataURLParts {\n  base64: boolean = false;\n  contentType: string | null = null;\n  rest: string;\n\n  constructor(dataURL: string) {\n    const matches = dataURL.match(/^data:([^,]+)?,/);\n    if (matches === null) {\n      throw invalidFormat(\n        StringFormat.DATA_URL,\n        \"Must be formatted 'data:[<mediatype>][;base64],<data>\"\n      );\n    }\n    const middle = matches[1] || null;\n    if (middle != null) {\n      this.base64 = endsWith(middle, ';base64');\n      this.contentType = this.base64\n        ? middle.substring(0, middle.length - ';base64'.length)\n        : middle;\n    }\n    this.rest = dataURL.substring(dataURL.indexOf(',') + 1);\n  }\n}\n\nexport function dataURLBytes_(dataUrl: string): Uint8Array {\n  const parts = new DataURLParts(dataUrl);\n  if (parts.base64) {\n    return base64Bytes_(StringFormat.BASE64, parts.rest);\n  } else {\n    return percentEncodedBytes_(parts.rest);\n  }\n}\n\nexport function dataURLContentType_(dataUrl: string): string | null {\n  const parts = new DataURLParts(dataUrl);\n  return parts.contentType;\n}\n\nfunction endsWith(s: string, end: string): boolean {\n  const longEnough = s.length >= end.length;\n  if (!longEnough) {\n    return false;\n  }\n\n  return s.substring(s.length - end.length) === end;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Converts a Base64 encoded string to a binary string. */\nexport function decodeBase64(encoded: string): string {\n  return atob(encoded);\n}\n\nexport function decodeUint8Array(data: Uint8Array): string {\n  return new TextDecoder().decode(data);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @file Provides a Blob-like wrapper for various binary types (including the\n * native Blob type). This makes it possible to upload types like ArrayBuffers,\n * making uploads possible in environments without the native Blob type.\n */\nimport { sliceBlob, getBlob } from './fs';\nimport { StringFormat, dataFromString } from './string';\nimport { isNativeBlob, isNativeBlobDefined, isString } from './type';\n\n/**\n * @param opt_elideCopy - If true, doesn't copy mutable input data\n *     (e.g. Uint8Arrays). Pass true only if you know the objects will not be\n *     modified after this blob's construction.\n *\n * @internal\n */\nexport class FbsBlob {\n  private data_!: Blob | Uint8Array;\n  private size_: number;\n  private type_: string;\n\n  constructor(data: Blob | Uint8Array | ArrayBuffer, elideCopy?: boolean) {\n    let size: number = 0;\n    let blobType: string = '';\n    if (isNativeBlob(data)) {\n      this.data_ = data as Blob;\n      size = (data as Blob).size;\n      blobType = (data as Blob).type;\n    } else if (data instanceof ArrayBuffer) {\n      if (elideCopy) {\n        this.data_ = new Uint8Array(data);\n      } else {\n        this.data_ = new Uint8Array(data.byteLength);\n        this.data_.set(new Uint8Array(data));\n      }\n      size = this.data_.length;\n    } else if (data instanceof Uint8Array) {\n      if (elideCopy) {\n        this.data_ = data as Uint8Array;\n      } else {\n        this.data_ = new Uint8Array(data.length);\n        this.data_.set(data as Uint8Array);\n      }\n      size = data.length;\n    }\n    this.size_ = size;\n    this.type_ = blobType;\n  }\n\n  size(): number {\n    return this.size_;\n  }\n\n  type(): string {\n    return this.type_;\n  }\n\n  slice(startByte: number, endByte: number): FbsBlob | null {\n    if (isNativeBlob(this.data_)) {\n      const realBlob = this.data_ as Blob;\n      const sliced = sliceBlob(realBlob, startByte, endByte);\n      if (sliced === null) {\n        return null;\n      }\n      return new FbsBlob(sliced);\n    } else {\n      const slice = new Uint8Array(\n        (this.data_ as Uint8Array).buffer,\n        startByte,\n        endByte - startByte\n      );\n      return new FbsBlob(slice, true);\n    }\n  }\n\n  static getBlob(...args: Array<string | FbsBlob>): FbsBlob | null {\n    if (isNativeBlobDefined()) {\n      const blobby: Array<Blob | Uint8Array | string> = args.map(\n        (val: string | FbsBlob): Blob | Uint8Array | string => {\n          if (val instanceof FbsBlob) {\n            return val.data_;\n          } else {\n            return val;\n          }\n        }\n      );\n      return new FbsBlob(getBlob.apply(null, blobby));\n    } else {\n      const uint8Arrays: Uint8Array[] = args.map(\n        (val: string | FbsBlob): Uint8Array => {\n          if (isString(val)) {\n            return dataFromString(StringFormat.RAW, val as string).data;\n          } else {\n            // Blobs don't exist, so this has to be a Uint8Array.\n            return (val as FbsBlob).data_ as Uint8Array;\n          }\n        }\n      );\n      let finalLength = 0;\n      uint8Arrays.forEach((array: Uint8Array): void => {\n        finalLength += array.byteLength;\n      });\n      const merged = new Uint8Array(finalLength);\n      let index = 0;\n      uint8Arrays.forEach((array: Uint8Array) => {\n        for (let i = 0; i < array.length; i++) {\n          merged[index++] = array[i];\n        }\n      });\n      return new FbsBlob(merged, true);\n    }\n  }\n\n  uploadData(): Blob | Uint8Array {\n    return this.data_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { isNonArrayObject } from './type';\n\n/**\n * Returns the Object resulting from parsing the given JSON, or null if the\n * given string does not represent a JSON object.\n */\nexport function jsonObjectOrNull(\n  s: string\n): { [name: string]: unknown } | null {\n  let obj;\n  try {\n    obj = JSON.parse(s);\n  } catch (e) {\n    return null;\n  }\n  if (isNonArrayObject(obj)) {\n    return obj;\n  } else {\n    return null;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Contains helper methods for manipulating paths.\n */\n\n/**\n * @return Null if the path is already at the root.\n */\nexport function parent(path: string): string | null {\n  if (path.length === 0) {\n    return null;\n  }\n  const index = path.lastIndexOf('/');\n  if (index === -1) {\n    return '';\n  }\n  const newPath = path.slice(0, index);\n  return newPath;\n}\n\nexport function child(path: string, childPath: string): string {\n  const canonicalChildPath = childPath\n    .split('/')\n    .filter(component => component.length > 0)\n    .join('/');\n  if (path.length === 0) {\n    return canonicalChildPath;\n  } else {\n    return path + '/' + canonicalChildPath;\n  }\n}\n\n/**\n * Returns the last component of a path.\n * '/foo/bar' -> 'bar'\n * '/foo/bar/baz/' -> 'baz/'\n * '/a' -> 'a'\n */\nexport function lastComponent(path: string): string {\n  const index = path.lastIndexOf('/', path.length - 2);\n  if (index === -1) {\n    return path;\n  } else {\n    return path.slice(index + 1);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Documentation for the metadata format\n */\nimport { Metadata } from '../metadata';\n\nimport { jsonObjectOrNull } from './json';\nimport { Location } from './location';\nimport { lastComponent } from './path';\nimport { isString } from './type';\nimport { makeUrl, makeQueryString } from './url';\nimport { Reference } from '../reference';\nimport { FirebaseStorageImpl } from '../service';\n\nexport function noXform_<T>(metadata: Metadata, value: T): T {\n  return value;\n}\n\nclass Mapping<T> {\n  local: string;\n  writable: boolean;\n  xform: (p1: Metadata, p2?: T) => T | undefined;\n\n  constructor(\n    public server: string,\n    local?: string | null,\n    writable?: boolean,\n    xform?: ((p1: Metadata, p2?: T) => T | undefined) | null\n  ) {\n    this.local = local || server;\n    this.writable = !!writable;\n    this.xform = xform || noXform_;\n  }\n}\ntype Mappings = Array<Mapping<string> | Mapping<number>>;\n\nexport { Mappings };\n\nlet mappings_: Mappings | null = null;\n\nexport function xformPath(fullPath: string | undefined): string | undefined {\n  if (!isString(fullPath) || fullPath.length < 2) {\n    return fullPath;\n  } else {\n    return lastComponent(fullPath);\n  }\n}\n\nexport function getMappings(): Mappings {\n  if (mappings_) {\n    return mappings_;\n  }\n  const mappings: Mappings = [];\n  mappings.push(new Mapping<string>('bucket'));\n  mappings.push(new Mapping<string>('generation'));\n  mappings.push(new Mapping<string>('metageneration'));\n  mappings.push(new Mapping<string>('name', 'fullPath', true));\n\n  function mappingsXformPath(\n    _metadata: Metadata,\n    fullPath: string | undefined\n  ): string | undefined {\n    return xformPath(fullPath);\n  }\n  const nameMapping = new Mapping<string>('name');\n  nameMapping.xform = mappingsXformPath;\n  mappings.push(nameMapping);\n\n  /**\n   * Coerces the second param to a number, if it is defined.\n   */\n  function xformSize(\n    _metadata: Metadata,\n    size?: number | string\n  ): number | undefined {\n    if (size !== undefined) {\n      return Number(size);\n    } else {\n      return size;\n    }\n  }\n  const sizeMapping = new Mapping<number>('size');\n  sizeMapping.xform = xformSize;\n  mappings.push(sizeMapping);\n  mappings.push(new Mapping<number>('timeCreated'));\n  mappings.push(new Mapping<string>('updated'));\n  mappings.push(new Mapping<string>('md5Hash', null, true));\n  mappings.push(new Mapping<string>('cacheControl', null, true));\n  mappings.push(new Mapping<string>('contentDisposition', null, true));\n  mappings.push(new Mapping<string>('contentEncoding', null, true));\n  mappings.push(new Mapping<string>('contentLanguage', null, true));\n  mappings.push(new Mapping<string>('contentType', null, true));\n  mappings.push(new Mapping<string>('metadata', 'customMetadata', true));\n  mappings_ = mappings;\n  return mappings_;\n}\n\nexport function addRef(metadata: Metadata, service: FirebaseStorageImpl): void {\n  function generateRef(): Reference {\n    const bucket: string = metadata['bucket'] as string;\n    const path: string = metadata['fullPath'] as string;\n    const loc = new Location(bucket, path);\n    return service._makeStorageReference(loc);\n  }\n  Object.defineProperty(metadata, 'ref', { get: generateRef });\n}\n\nexport function fromResource(\n  service: FirebaseStorageImpl,\n  resource: { [name: string]: unknown },\n  mappings: Mappings\n): Metadata {\n  const metadata: Metadata = {} as Metadata;\n  metadata['type'] = 'file';\n  const len = mappings.length;\n  for (let i = 0; i < len; i++) {\n    const mapping = mappings[i];\n    metadata[mapping.local] = (mapping as Mapping<unknown>).xform(\n      metadata,\n      resource[mapping.server]\n    );\n  }\n  addRef(metadata, service);\n  return metadata;\n}\n\nexport function fromResourceString(\n  service: FirebaseStorageImpl,\n  resourceString: string,\n  mappings: Mappings\n): Metadata | null {\n  const obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  const resource = obj as Metadata;\n  return fromResource(service, resource, mappings);\n}\n\nexport function downloadUrlFromResourceString(\n  metadata: Metadata,\n  resourceString: string,\n  host: string,\n  protocol: string\n): string | null {\n  const obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  if (!isString(obj['downloadTokens'])) {\n    // This can happen if objects are uploaded through GCS and retrieved\n    // through list, so we don't want to throw an Error.\n    return null;\n  }\n  const tokens: string = obj['downloadTokens'] as string;\n  if (tokens.length === 0) {\n    return null;\n  }\n  const encode = encodeURIComponent;\n  const tokensList = tokens.split(',');\n  const urls = tokensList.map((token: string): string => {\n    const bucket: string = metadata['bucket'] as string;\n    const path: string = metadata['fullPath'] as string;\n    const urlPart = '/b/' + encode(bucket) + '/o/' + encode(path);\n    const base = makeUrl(urlPart, host, protocol);\n    const queryString = makeQueryString({\n      alt: 'media',\n      token\n    });\n    return base + queryString;\n  });\n  return urls[0];\n}\n\nexport function toResourceString(\n  metadata: Partial<Metadata>,\n  mappings: Mappings\n): string {\n  const resource: {\n    [prop: string]: unknown;\n  } = {};\n  const len = mappings.length;\n  for (let i = 0; i < len; i++) {\n    const mapping = mappings[i];\n    if (mapping.writable) {\n      resource[mapping.server] = metadata[mapping.local];\n    }\n  }\n  return JSON.stringify(resource);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Documentation for the listOptions and listResult format\n */\nimport { Location } from './location';\nimport { jsonObjectOrNull } from './json';\nimport { ListResult } from '../list';\nimport { FirebaseStorageImpl } from '../service';\n\n/**\n * Represents the simplified object metadata returned by List API.\n * Other fields are filtered because list in Firebase Rules does not grant\n * the permission to read the metadata.\n */\ninterface ListMetadataResponse {\n  name: string;\n  bucket: string;\n}\n\n/**\n * Represents the JSON response of List API.\n */\ninterface ListResultResponse {\n  prefixes: string[];\n  items: ListMetadataResponse[];\n  nextPageToken?: string;\n}\n\nconst PREFIXES_KEY = 'prefixes';\nconst ITEMS_KEY = 'items';\n\nfunction fromBackendResponse(\n  service: FirebaseStorageImpl,\n  bucket: string,\n  resource: ListResultResponse\n): ListResult {\n  const listResult: ListResult = {\n    prefixes: [],\n    items: [],\n    nextPageToken: resource['nextPageToken']\n  };\n  if (resource[PREFIXES_KEY]) {\n    for (const path of resource[PREFIXES_KEY]) {\n      const pathWithoutTrailingSlash = path.replace(/\\/$/, '');\n      const reference = service._makeStorageReference(\n        new Location(bucket, pathWithoutTrailingSlash)\n      );\n      listResult.prefixes.push(reference);\n    }\n  }\n\n  if (resource[ITEMS_KEY]) {\n    for (const item of resource[ITEMS_KEY]) {\n      const reference = service._makeStorageReference(\n        new Location(bucket, item['name'])\n      );\n      listResult.items.push(reference);\n    }\n  }\n  return listResult;\n}\n\nexport function fromResponseString(\n  service: FirebaseStorageImpl,\n  bucket: string,\n  resourceString: string\n): ListResult | null {\n  const obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  const resource = obj as unknown as ListResultResponse;\n  return fromBackendResponse(service, bucket, resource);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { StorageError } from './error';\nimport { Headers, Connection } from './connection';\n\n/**\n * Type for url params stored in RequestInfo.\n */\nexport interface UrlParams {\n  [name: string]: string | number;\n}\n\n/**\n * A function that converts a server response to the API type expected by the\n * SDK.\n *\n * @param I - the type of the backend's network response\n * @param O - the output response type used by the rest of the SDK.\n */\nexport type RequestHandler<I, O> = (connection: Connection, response: I) => O;\n\nexport class RequestInfo<T> {\n  urlParams: UrlParams = {};\n  headers: Headers = {};\n  body: Blob | string | Uint8Array | null = null;\n  errorHandler: RequestHandler<StorageError, StorageError> | null = null;\n\n  /**\n   * Called with the current number of bytes uploaded and total size (-1 if not\n   * computable) of the request body (i.e. used to report upload progress).\n   */\n  progressCallback: ((p1: number, p2: number) => void) | null = null;\n  successCodes: number[] = [200];\n  additionalRetryCodes: number[] = [];\n\n  constructor(\n    public url: string,\n    public method: string,\n    /**\n     * Returns the value with which to resolve the request's promise. Only called\n     * if the request is successful. Throw from this function to reject the\n     * returned Request's promise with the thrown error.\n     * Note: The XhrIo passed to this function may be reused after this callback\n     * returns. Do not keep a reference to it in any way.\n     */\n    public handler: RequestHandler<string, T>,\n    public timeout: number\n  ) {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines methods for interacting with the network.\n */\n\nimport { Metadata } from '../metadata';\nimport { ListResult } from '../list';\nimport { FbsBlob } from './blob';\nimport {\n  StorageError,\n  cannotSliceBlob,\n  unauthenticated,\n  quotaExceeded,\n  unauthorized,\n  objectNotFound,\n  serverFileWrongSize,\n  unknown,\n  unauthorizedApp\n} from './error';\nimport { Location } from './location';\nimport {\n  Mappings,\n  fromResourceString,\n  downloadUrlFromResourceString,\n  toResourceString\n} from './metadata';\nimport { fromResponseString } from './list';\nimport { RequestInfo, UrlParams } from './requestinfo';\nimport { isString } from './type';\nimport { makeUrl } from './url';\nimport { Connection } from './connection';\nimport { FirebaseStorageImpl } from '../service';\n\n/**\n * Throws the UNKNOWN StorageError if cndn is false.\n */\nexport function handlerCheck(cndn: boolean): void {\n  if (!cndn) {\n    throw unknown();\n  }\n}\n\nexport function metadataHandler(\n  service: FirebaseStorageImpl,\n  mappings: Mappings\n): (p1: Connection, p2: string) => Metadata {\n  function handler(xhr: Connection, text: string): Metadata {\n    const metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return metadata as Metadata;\n  }\n  return handler;\n}\n\nexport function listHandler(\n  service: FirebaseStorageImpl,\n  bucket: string\n): (p1: Connection, p2: string) => ListResult {\n  function handler(xhr: Connection, text: string): ListResult {\n    const listResult = fromResponseString(service, bucket, text);\n    handlerCheck(listResult !== null);\n    return listResult as ListResult;\n  }\n  return handler;\n}\n\nexport function downloadUrlHandler(\n  service: FirebaseStorageImpl,\n  mappings: Mappings\n): (p1: Connection, p2: string) => string | null {\n  function handler(xhr: Connection, text: string): string | null {\n    const metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return downloadUrlFromResourceString(\n      metadata as Metadata,\n      text,\n      service.host,\n      service._protocol\n    );\n  }\n  return handler;\n}\n\nexport function sharedErrorHandler(\n  location: Location\n): (p1: Connection, p2: StorageError) => StorageError {\n  function errorHandler(xhr: Connection, err: StorageError): StorageError {\n    let newErr;\n    if (xhr.getStatus() === 401) {\n      if (\n        // This exact message string is the only consistent part of the\n        // server's error response that identifies it as an App Check error.\n        xhr.getResponseText().includes('Firebase App Check token is invalid')\n      ) {\n        newErr = unauthorizedApp();\n      } else {\n        newErr = unauthenticated();\n      }\n    } else {\n      if (xhr.getStatus() === 402) {\n        newErr = quotaExceeded(location.bucket);\n      } else {\n        if (xhr.getStatus() === 403) {\n          newErr = unauthorized(location.path);\n        } else {\n          newErr = err;\n        }\n      }\n    }\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n  return errorHandler;\n}\n\nexport function objectErrorHandler(\n  location: Location\n): (p1: Connection, p2: StorageError) => StorageError {\n  const shared = sharedErrorHandler(location);\n\n  function errorHandler(xhr: Connection, err: StorageError): StorageError {\n    let newErr = shared(xhr, err);\n    if (xhr.getStatus() === 404) {\n      newErr = objectNotFound(location.path);\n    }\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n  return errorHandler;\n}\n\nexport function getMetadata(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings\n): RequestInfo<Metadata> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function list(\n  service: FirebaseStorageImpl,\n  location: Location,\n  delimiter?: string,\n  pageToken?: string | null,\n  maxResults?: number | null\n): RequestInfo<ListResult> {\n  const urlParams: UrlParams = {};\n  if (location.isRoot) {\n    urlParams['prefix'] = '';\n  } else {\n    urlParams['prefix'] = location.path + '/';\n  }\n  if (delimiter && delimiter.length > 0) {\n    urlParams['delimiter'] = delimiter;\n  }\n  if (pageToken) {\n    urlParams['pageToken'] = pageToken;\n  }\n  if (maxResults) {\n    urlParams['maxResults'] = maxResults;\n  }\n  const urlPart = location.bucketOnlyServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    listHandler(service, location.bucket),\n    timeout\n  );\n  requestInfo.urlParams = urlParams;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\nexport function getDownloadUrl(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings\n): RequestInfo<string | null> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    downloadUrlHandler(service, mappings),\n    timeout\n  );\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function updateMetadata(\n  service: FirebaseStorageImpl,\n  location: Location,\n  metadata: Partial<Metadata>,\n  mappings: Mappings\n): RequestInfo<Metadata> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'PATCH';\n  const body = toResourceString(metadata, mappings);\n  const headers = { 'Content-Type': 'application/json; charset=utf-8' };\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function deleteObject(\n  service: FirebaseStorageImpl,\n  location: Location\n): RequestInfo<void> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'DELETE';\n  const timeout = service.maxOperationRetryTime;\n\n  function handler(_xhr: Connection, _text: string): void {}\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.successCodes = [200, 204];\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function determineContentType_(\n  metadata: Metadata | null,\n  blob: FbsBlob | null\n): string {\n  return (\n    (metadata && metadata['contentType']) ||\n    (blob && blob.type()) ||\n    'application/octet-stream'\n  );\n}\n\nexport function metadataForUpload_(\n  location: Location,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): Metadata {\n  const metadataClone = Object.assign({}, metadata);\n  metadataClone['fullPath'] = location.path;\n  metadataClone['size'] = blob.size();\n  if (!metadataClone['contentType']) {\n    metadataClone['contentType'] = determineContentType_(null, blob);\n  }\n  return metadataClone;\n}\n\n/**\n * Prepare RequestInfo for uploads as Content-Type: multipart.\n */\nexport function multipartUpload(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): RequestInfo<Metadata> {\n  const urlPart = location.bucketOnlyServerUrl();\n  const headers: { [prop: string]: string } = {\n    'X-Goog-Upload-Protocol': 'multipart'\n  };\n\n  function genBoundary(): string {\n    let str = '';\n    for (let i = 0; i < 2; i++) {\n      str = str + Math.random().toString().slice(2);\n    }\n    return str;\n  }\n  const boundary = genBoundary();\n  headers['Content-Type'] = 'multipart/related; boundary=' + boundary;\n  const metadata_ = metadataForUpload_(location, blob, metadata);\n  const metadataString = toResourceString(metadata_, mappings);\n  const preBlobPart =\n    '--' +\n    boundary +\n    '\\r\\n' +\n    'Content-Type: application/json; charset=utf-8\\r\\n\\r\\n' +\n    metadataString +\n    '\\r\\n--' +\n    boundary +\n    '\\r\\n' +\n    'Content-Type: ' +\n    metadata_['contentType'] +\n    '\\r\\n\\r\\n';\n  const postBlobPart = '\\r\\n--' + boundary + '--';\n  const body = FbsBlob.getBlob(preBlobPart, blob, postBlobPart);\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n  const urlParams: UrlParams = { name: metadata_['fullPath']! };\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * @param current The number of bytes that have been uploaded so far.\n * @param total The total number of bytes in the upload.\n * @param opt_finalized True if the server has finished the upload.\n * @param opt_metadata The upload metadata, should\n *     only be passed if opt_finalized is true.\n */\nexport class ResumableUploadStatus {\n  finalized: boolean;\n  metadata: Metadata | null;\n\n  constructor(\n    public current: number,\n    public total: number,\n    finalized?: boolean,\n    metadata?: Metadata | null\n  ) {\n    this.finalized = !!finalized;\n    this.metadata = metadata || null;\n  }\n}\n\nexport function checkResumeHeader_(\n  xhr: Connection,\n  allowed?: string[]\n): string {\n  let status: string | null = null;\n  try {\n    status = xhr.getResponseHeader('X-Goog-Upload-Status');\n  } catch (e) {\n    handlerCheck(false);\n  }\n  const allowedStatus = allowed || ['active'];\n  handlerCheck(!!status && allowedStatus.indexOf(status) !== -1);\n  return status as string;\n}\n\nexport function createResumableUpload(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): RequestInfo<string> {\n  const urlPart = location.bucketOnlyServerUrl();\n  const metadataForUpload = metadataForUpload_(location, blob, metadata);\n  const urlParams: UrlParams = { name: metadataForUpload['fullPath']! };\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'POST';\n  const headers = {\n    'X-Goog-Upload-Protocol': 'resumable',\n    'X-Goog-Upload-Command': 'start',\n    'X-Goog-Upload-Header-Content-Length': `${blob.size()}`,\n    'X-Goog-Upload-Header-Content-Type': metadataForUpload['contentType']!,\n    'Content-Type': 'application/json; charset=utf-8'\n  };\n  const body = toResourceString(metadataForUpload, mappings);\n  const timeout = service.maxUploadRetryTime;\n\n  function handler(xhr: Connection): string {\n    checkResumeHeader_(xhr);\n    let url;\n    try {\n      url = xhr.getResponseHeader('X-Goog-Upload-URL');\n    } catch (e) {\n      handlerCheck(false);\n    }\n    handlerCheck(isString(url));\n    return url as string;\n  }\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * @param url From a call to fbs.requests.createResumableUpload.\n */\nexport function getResumableUploadStatus(\n  service: FirebaseStorageImpl,\n  location: Location,\n  url: string,\n  blob: FbsBlob\n): RequestInfo<ResumableUploadStatus> {\n  const headers = { 'X-Goog-Upload-Command': 'query' };\n\n  function handler(xhr: Connection): ResumableUploadStatus {\n    const status = checkResumeHeader_(xhr, ['active', 'final']);\n    let sizeString: string | null = null;\n    try {\n      sizeString = xhr.getResponseHeader('X-Goog-Upload-Size-Received');\n    } catch (e) {\n      handlerCheck(false);\n    }\n\n    if (!sizeString) {\n      // null or empty string\n      handlerCheck(false);\n    }\n\n    const size = Number(sizeString);\n    handlerCheck(!isNaN(size));\n    return new ResumableUploadStatus(size, blob.size(), status === 'final');\n  }\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * Any uploads via the resumable upload API must transfer a number of bytes\n * that is a multiple of this number.\n */\nexport const RESUMABLE_UPLOAD_CHUNK_SIZE: number = 256 * 1024;\n\n/**\n * @param url From a call to fbs.requests.createResumableUpload.\n * @param chunkSize Number of bytes to upload.\n * @param status The previous status.\n *     If not passed or null, we start from the beginning.\n * @throws fbs.Error If the upload is already complete, the passed in status\n *     has a final size inconsistent with the blob, or the blob cannot be sliced\n *     for upload.\n */\nexport function continueResumableUpload(\n  location: Location,\n  service: FirebaseStorageImpl,\n  url: string,\n  blob: FbsBlob,\n  chunkSize: number,\n  mappings: Mappings,\n  status?: ResumableUploadStatus | null,\n  progressCallback?: ((p1: number, p2: number) => void) | null\n): RequestInfo<ResumableUploadStatus> {\n  // TODO(andysoto): standardize on internal asserts\n  // assert(!(opt_status && opt_status.finalized));\n  const status_ = new ResumableUploadStatus(0, 0);\n  if (status) {\n    status_.current = status.current;\n    status_.total = status.total;\n  } else {\n    status_.current = 0;\n    status_.total = blob.size();\n  }\n  if (blob.size() !== status_.total) {\n    throw serverFileWrongSize();\n  }\n  const bytesLeft = status_.total - status_.current;\n  let bytesToUpload = bytesLeft;\n  if (chunkSize > 0) {\n    bytesToUpload = Math.min(bytesToUpload, chunkSize);\n  }\n  const startByte = status_.current;\n  const endByte = startByte + bytesToUpload;\n  const uploadCommand =\n    bytesToUpload === bytesLeft ? 'upload, finalize' : 'upload';\n  const headers = {\n    'X-Goog-Upload-Command': uploadCommand,\n    'X-Goog-Upload-Offset': `${status_.current}`\n  };\n  const body = blob.slice(startByte, endByte);\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n\n  function handler(xhr: Connection, text: string): ResumableUploadStatus {\n    // TODO(andysoto): Verify the MD5 of each uploaded range:\n    // the 'x-range-md5' header comes back with status code 308 responses.\n    // We'll only be able to bail out though, because you can't re-upload a\n    // range that you previously uploaded.\n    const uploadStatus = checkResumeHeader_(xhr, ['active', 'final']);\n    const newCurrent = status_.current + bytesToUpload;\n    const size = blob.size();\n    let metadata;\n    if (uploadStatus === 'final') {\n      metadata = metadataHandler(service, mappings)(xhr, text);\n    } else {\n      metadata = null;\n    }\n    return new ResumableUploadStatus(\n      newCurrent,\n      size,\n      uploadStatus === 'final',\n      metadata\n    );\n  }\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.progressCallback = progressCallback || null;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Enumerations used for upload tasks.\n */\n\n/**\n * An event that is triggered on a task.\n * @internal\n */\nexport type TaskEvent = string;\n\n/**\n * An event that is triggered on a task.\n * @internal\n */\nexport const TaskEvent = {\n  /**\n   * For this event,\n   * <ul>\n   *   <li>The `next` function is triggered on progress updates and when the\n   *       task is paused/resumed with an `UploadTaskSnapshot` as the first\n   *       argument.</li>\n   *   <li>The `error` function is triggered if the upload is canceled or fails\n   *       for another reason.</li>\n   *   <li>The `complete` function is triggered if the upload completes\n   *       successfully.</li>\n   * </ul>\n   */\n  STATE_CHANGED: 'state_changed'\n};\n\n/**\n * Internal enum for task state.\n */\nexport const enum InternalTaskState {\n  RUNNING = 'running',\n  PAUSING = 'pausing',\n  PAUSED = 'paused',\n  SUCCESS = 'success',\n  CANCELING = 'canceling',\n  CANCELED = 'canceled',\n  ERROR = 'error'\n}\n\n/**\n * Represents the current state of a running upload.\n * @internal\n */\nexport type TaskState = typeof TaskState[keyof typeof TaskState];\n\n// type keys = keyof TaskState\n/**\n * Represents the current state of a running upload.\n * @internal\n */\nexport const TaskState = {\n  /** The task is currently transferring data. */\n  RUNNING: 'running',\n\n  /** The task was paused by the user. */\n  PAUSED: 'paused',\n\n  /** The task completed successfully. */\n  SUCCESS: 'success',\n\n  /** The task was canceled. */\n  CANCELED: 'canceled',\n\n  /** The task failed with an error. */\n  ERROR: 'error'\n} as const;\n\nexport function taskStateFromInternalTaskState(\n  state: InternalTaskState\n): TaskState {\n  switch (state) {\n    case InternalTaskState.RUNNING:\n    case InternalTaskState.PAUSING:\n    case InternalTaskState.CANCELING:\n      return TaskState.RUNNING;\n    case InternalTaskState.PAUSED:\n      return TaskState.PAUSED;\n    case InternalTaskState.SUCCESS:\n      return TaskState.SUCCESS;\n    case InternalTaskState.CANCELED:\n      return TaskState.CANCELED;\n    case InternalTaskState.ERROR:\n      return TaskState.ERROR;\n    default:\n      // TODO(andysoto): assert(false);\n      return TaskState.ERROR;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { isFunction } from './type';\nimport { StorageError } from './error';\n\n/**\n * Function that is called once for each value in a stream of values.\n */\nexport type NextFn<T> = (value: T) => void;\n\n/**\n * A function that is called with a `StorageError`\n * if the event stream ends due to an error.\n */\nexport type ErrorFn = (error: StorageError) => void;\n\n/**\n * A function that is called if the event stream ends normally.\n */\nexport type CompleteFn = () => void;\n\n/**\n * Unsubscribes from a stream.\n */\nexport type Unsubscribe = () => void;\n\n/**\n * An observer identical to the `Observer` defined in packages/util except the\n * error passed into the ErrorFn is specifically a `StorageError`.\n */\nexport interface StorageObserver<T> {\n  /**\n   * Function that is called once for each value in the event stream.\n   */\n  next?: NextFn<T>;\n  /**\n   * A function that is called with a `StorageError`\n   * if the event stream ends due to an error.\n   */\n  error?: ErrorFn;\n  /**\n   * A function that is called if the event stream ends normally.\n   */\n  complete?: CompleteFn;\n}\n\n/**\n * Subscribes to an event stream.\n */\nexport type Subscribe<T> = (\n  next?: NextFn<T> | StorageObserver<T>,\n  error?: ErrorFn,\n  complete?: CompleteFn\n) => Unsubscribe;\n\nexport class Observer<T> implements StorageObserver<T> {\n  next?: NextFn<T>;\n  error?: ErrorFn;\n  complete?: CompleteFn;\n\n  constructor(\n    nextOrObserver?: NextFn<T> | StorageObserver<T>,\n    error?: ErrorFn,\n    complete?: CompleteFn\n  ) {\n    const asFunctions =\n      isFunction(nextOrObserver) || error != null || complete != null;\n    if (asFunctions) {\n      this.next = nextOrObserver as NextFn<T>;\n      this.error = error ?? undefined;\n      this.complete = complete ?? undefined;\n    } else {\n      const observer = nextOrObserver as {\n        next?: NextFn<T>;\n        error?: ErrorFn;\n        complete?: CompleteFn;\n      };\n      this.next = observer.next;\n      this.error = observer.error;\n      this.complete = observer.complete;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns a function that invokes f with its arguments asynchronously as a\n * microtask, i.e. as soon as possible after the current script returns back\n * into browser code.\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function async(f: Function): Function {\n  return (...argsToForward: unknown[]) => {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    Promise.resolve().then(() => f(...argsToForward));\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Headers,\n  Connection,\n  ErrorCode\n} from '../../implementation/connection';\nimport { internalError } from '../../implementation/error';\n\n/** An override for the text-based Connection. Used in tests. */\nlet connectionFactoryOverride: (() => Connection) | null = null;\n\n/**\n * Network layer for browsers. We use this instead of goog.net.XhrIo because\n * goog.net.XhrIo is hyuuuuge and doesn't work in React Native on Android.\n */\nexport class XhrConnection implements Connection {\n  private xhr_: XMLHttpRequest;\n  private errorCode_: ErrorCode;\n  private sendPromise_: Promise<void>;\n  private sent_: boolean = false;\n\n  constructor() {\n    this.xhr_ = new XMLHttpRequest();\n    this.errorCode_ = ErrorCode.NO_ERROR;\n    this.sendPromise_ = new Promise(resolve => {\n      this.xhr_.addEventListener('abort', () => {\n        this.errorCode_ = ErrorCode.ABORT;\n        resolve();\n      });\n      this.xhr_.addEventListener('error', () => {\n        this.errorCode_ = ErrorCode.NETWORK_ERROR;\n        resolve();\n      });\n      this.xhr_.addEventListener('load', () => {\n        resolve();\n      });\n    });\n  }\n\n  send(\n    url: string,\n    method: string,\n    body?: ArrayBufferView | Blob | string,\n    headers?: Headers\n  ): Promise<void> {\n    if (this.sent_) {\n      throw internalError('cannot .send() more than once');\n    }\n    this.sent_ = true;\n    this.xhr_.open(method, url, true);\n    if (headers !== undefined) {\n      for (const key in headers) {\n        if (headers.hasOwnProperty(key)) {\n          this.xhr_.setRequestHeader(key, headers[key].toString());\n        }\n      }\n    }\n    if (body !== undefined) {\n      this.xhr_.send(body);\n    } else {\n      this.xhr_.send();\n    }\n    return this.sendPromise_;\n  }\n\n  getErrorCode(): ErrorCode {\n    if (!this.sent_) {\n      throw internalError('cannot .getErrorCode() before sending');\n    }\n    return this.errorCode_;\n  }\n\n  getStatus(): number {\n    if (!this.sent_) {\n      throw internalError('cannot .getStatus() before sending');\n    }\n    try {\n      return this.xhr_.status;\n    } catch (e) {\n      return -1;\n    }\n  }\n\n  getResponseText(): string {\n    if (!this.sent_) {\n      throw internalError('cannot .getResponseText() before sending');\n    }\n    return this.xhr_.responseText;\n  }\n\n  /** Aborts the request. */\n  abort(): void {\n    this.xhr_.abort();\n  }\n\n  getResponseHeader(header: string): string | null {\n    return this.xhr_.getResponseHeader(header);\n  }\n\n  addUploadProgressListener(listener: (p1: ProgressEvent) => void): void {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.addEventListener('progress', listener);\n    }\n  }\n\n  removeUploadProgressListener(listener: (p1: ProgressEvent) => void): void {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.removeEventListener('progress', listener);\n    }\n  }\n}\n\nexport function newConnection(): Connection {\n  return connectionFactoryOverride\n    ? connectionFactoryOverride()\n    : new XhrConnection();\n}\n\nexport function injectTestConnection(factory: (() => Connection) | null): void {\n  connectionFactoryOverride = factory;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Defines types for interacting with blob transfer tasks.\n */\n\nimport { FbsBlob } from './implementation/blob';\nimport {\n  canceled,\n  StorageErrorCode,\n  StorageError\n} from './implementation/error';\nimport {\n  InternalTaskState,\n  TaskEvent,\n  TaskState,\n  taskStateFromInternalTaskState\n} from './implementation/taskenums';\nimport { Metadata } from './metadata';\nimport {\n  Observer,\n  Subscribe,\n  Unsubscribe,\n  StorageObserver as StorageObserverInternal,\n  NextFn\n} from './implementation/observer';\nimport { Request } from './implementation/request';\nimport { UploadTaskSnapshot, StorageObserver } from './public-types';\nimport { async as fbsAsync } from './implementation/async';\nimport { Mappings, getMappings } from './implementation/metadata';\nimport {\n  createResumableUpload,\n  getResumableUploadStatus,\n  RESUMABLE_UPLOAD_CHUNK_SIZE,\n  ResumableUploadStatus,\n  continueResumableUpload,\n  getMetadata,\n  multipartUpload\n} from './implementation/requests';\nimport { Reference } from './reference';\nimport { newConnection } from './platform/connection';\n\n/**\n * Represents a blob being uploaded. Can be used to pause/resume/cancel the\n * upload and manage callbacks for various events.\n * @internal\n */\nexport class UploadTask {\n  private _ref: Reference;\n  /**\n   * The data to be uploaded.\n   */\n  _blob: FbsBlob;\n  /**\n   * Metadata related to the upload.\n   */\n  _metadata: Metadata | null;\n  private _mappings: Mappings;\n  /**\n   * Number of bytes transferred so far.\n   */\n  _transferred: number = 0;\n  private _needToFetchStatus: boolean = false;\n  private _needToFetchMetadata: boolean = false;\n  private _observers: Array<StorageObserverInternal<UploadTaskSnapshot>> = [];\n  private _resumable: boolean;\n  /**\n   * Upload state.\n   */\n  _state: InternalTaskState;\n  private _error?: StorageError = undefined;\n  private _uploadUrl?: string = undefined;\n  private _request?: Request<unknown> = undefined;\n  private _chunkMultiplier: number = 1;\n  private _errorHandler: (p1: StorageError) => void;\n  private _metadataErrorHandler: (p1: StorageError) => void;\n  private _resolve?: (p1: UploadTaskSnapshot) => void = undefined;\n  private _reject?: (p1: StorageError) => void = undefined;\n  private _promise: Promise<UploadTaskSnapshot>;\n\n  /**\n   * @param ref - The firebaseStorage.Reference object this task came\n   *     from, untyped to avoid cyclic dependencies.\n   * @param blob - The blob to upload.\n   */\n  constructor(ref: Reference, blob: FbsBlob, metadata: Metadata | null = null) {\n    this._ref = ref;\n    this._blob = blob;\n    this._metadata = metadata;\n    this._mappings = getMappings();\n    this._resumable = this._shouldDoResumable(this._blob);\n    this._state = InternalTaskState.RUNNING;\n    this._errorHandler = error => {\n      this._request = undefined;\n      this._chunkMultiplier = 1;\n      if (error._codeEquals(StorageErrorCode.CANCELED)) {\n        this._needToFetchStatus = true;\n        this.completeTransitions_();\n      } else {\n        this._error = error;\n        this._transition(InternalTaskState.ERROR);\n      }\n    };\n    this._metadataErrorHandler = error => {\n      this._request = undefined;\n      if (error._codeEquals(StorageErrorCode.CANCELED)) {\n        this.completeTransitions_();\n      } else {\n        this._error = error;\n        this._transition(InternalTaskState.ERROR);\n      }\n    };\n    this._promise = new Promise((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n      this._start();\n    });\n\n    // Prevent uncaught rejections on the internal promise from bubbling out\n    // to the top level with a dummy handler.\n    this._promise.then(null, () => {});\n  }\n\n  private _makeProgressCallback(): (p1: number, p2: number) => void {\n    const sizeBefore = this._transferred;\n    return loaded => this._updateProgress(sizeBefore + loaded);\n  }\n\n  private _shouldDoResumable(blob: FbsBlob): boolean {\n    return blob.size() > 256 * 1024;\n  }\n\n  private _start(): void {\n    if (this._state !== InternalTaskState.RUNNING) {\n      // This can happen if someone pauses us in a resume callback, for example.\n      return;\n    }\n    if (this._request !== undefined) {\n      return;\n    }\n    if (this._resumable) {\n      if (this._uploadUrl === undefined) {\n        this._createResumable();\n      } else {\n        if (this._needToFetchStatus) {\n          this._fetchStatus();\n        } else {\n          if (this._needToFetchMetadata) {\n            // Happens if we miss the metadata on upload completion.\n            this._fetchMetadata();\n          } else {\n            this._continueUpload();\n          }\n        }\n      }\n    } else {\n      this._oneShotUpload();\n    }\n  }\n\n  private _resolveToken(\n    callback: (authToken: string | null, appCheckToken: string | null) => void\n  ): void {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    Promise.all([\n      this._ref.storage._getAuthToken(),\n      this._ref.storage._getAppCheckToken()\n    ]).then(([authToken, appCheckToken]) => {\n      switch (this._state) {\n        case InternalTaskState.RUNNING:\n          callback(authToken, appCheckToken);\n          break;\n        case InternalTaskState.CANCELING:\n          this._transition(InternalTaskState.CANCELED);\n          break;\n        case InternalTaskState.PAUSING:\n          this._transition(InternalTaskState.PAUSED);\n          break;\n        default:\n      }\n    });\n  }\n\n  // TODO(andysoto): assert false\n\n  private _createResumable(): void {\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = createResumableUpload(\n        this._ref.storage,\n        this._ref._location,\n        this._mappings,\n        this._blob,\n        this._metadata\n      );\n      const createRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        newConnection,\n        authToken,\n        appCheckToken\n      );\n      this._request = createRequest;\n      createRequest.getPromise().then((url: string) => {\n        this._request = undefined;\n        this._uploadUrl = url;\n        this._needToFetchStatus = false;\n        this.completeTransitions_();\n      }, this._errorHandler);\n    });\n  }\n\n  private _fetchStatus(): void {\n    // TODO(andysoto): assert(this.uploadUrl_ !== null);\n    const url = this._uploadUrl as string;\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = getResumableUploadStatus(\n        this._ref.storage,\n        this._ref._location,\n        url,\n        this._blob\n      );\n      const statusRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        newConnection,\n        authToken,\n        appCheckToken\n      );\n      this._request = statusRequest;\n      statusRequest.getPromise().then(status => {\n        status = status as ResumableUploadStatus;\n        this._request = undefined;\n        this._updateProgress(status.current);\n        this._needToFetchStatus = false;\n        if (status.finalized) {\n          this._needToFetchMetadata = true;\n        }\n        this.completeTransitions_();\n      }, this._errorHandler);\n    });\n  }\n\n  private _continueUpload(): void {\n    const chunkSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\n    const status = new ResumableUploadStatus(\n      this._transferred,\n      this._blob.size()\n    );\n\n    // TODO(andysoto): assert(this.uploadUrl_ !== null);\n    const url = this._uploadUrl as string;\n    this._resolveToken((authToken, appCheckToken) => {\n      let requestInfo;\n      try {\n        requestInfo = continueResumableUpload(\n          this._ref._location,\n          this._ref.storage,\n          url,\n          this._blob,\n          chunkSize,\n          this._mappings,\n          status,\n          this._makeProgressCallback()\n        );\n      } catch (e) {\n        this._error = e;\n        this._transition(InternalTaskState.ERROR);\n        return;\n      }\n      const uploadRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        newConnection,\n        authToken,\n        appCheckToken\n      );\n      this._request = uploadRequest;\n      uploadRequest.getPromise().then((newStatus: ResumableUploadStatus) => {\n        this._increaseMultiplier();\n        this._request = undefined;\n        this._updateProgress(newStatus.current);\n        if (newStatus.finalized) {\n          this._metadata = newStatus.metadata;\n          this._transition(InternalTaskState.SUCCESS);\n        } else {\n          this.completeTransitions_();\n        }\n      }, this._errorHandler);\n    });\n  }\n\n  private _increaseMultiplier(): void {\n    const currentSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\n\n    // Max chunk size is 32M.\n    if (currentSize < 32 * 1024 * 1024) {\n      this._chunkMultiplier *= 2;\n    }\n  }\n\n  private _fetchMetadata(): void {\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = getMetadata(\n        this._ref.storage,\n        this._ref._location,\n        this._mappings\n      );\n      const metadataRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        newConnection,\n        authToken,\n        appCheckToken\n      );\n      this._request = metadataRequest;\n      metadataRequest.getPromise().then(metadata => {\n        this._request = undefined;\n        this._metadata = metadata;\n        this._transition(InternalTaskState.SUCCESS);\n      }, this._metadataErrorHandler);\n    });\n  }\n\n  private _oneShotUpload(): void {\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = multipartUpload(\n        this._ref.storage,\n        this._ref._location,\n        this._mappings,\n        this._blob,\n        this._metadata\n      );\n      const multipartRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        newConnection,\n        authToken,\n        appCheckToken\n      );\n      this._request = multipartRequest;\n      multipartRequest.getPromise().then(metadata => {\n        this._request = undefined;\n        this._metadata = metadata;\n        this._updateProgress(this._blob.size());\n        this._transition(InternalTaskState.SUCCESS);\n      }, this._errorHandler);\n    });\n  }\n\n  private _updateProgress(transferred: number): void {\n    const old = this._transferred;\n    this._transferred = transferred;\n\n    // A progress update can make the \"transferred\" value smaller (e.g. a\n    // partial upload not completed by server, after which the \"transferred\"\n    // value may reset to the value at the beginning of the request).\n    if (this._transferred !== old) {\n      this._notifyObservers();\n    }\n  }\n\n  private _transition(state: InternalTaskState): void {\n    if (this._state === state) {\n      return;\n    }\n    switch (state) {\n      case InternalTaskState.CANCELING:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n        if (this._request !== undefined) {\n          this._request.cancel();\n        }\n        break;\n      case InternalTaskState.PAUSING:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING);\n        this._state = state;\n        if (this._request !== undefined) {\n          this._request.cancel();\n        }\n        break;\n      case InternalTaskState.RUNNING:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        const wasPaused = this._state === InternalTaskState.PAUSED;\n        this._state = state;\n        if (wasPaused) {\n          this._notifyObservers();\n          this._start();\n        }\n        break;\n      case InternalTaskState.PAUSED:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case InternalTaskState.CANCELED:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._error = canceled();\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case InternalTaskState.ERROR:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case InternalTaskState.SUCCESS:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      default: // Ignore\n    }\n  }\n\n  private completeTransitions_(): void {\n    switch (this._state) {\n      case InternalTaskState.PAUSING:\n        this._transition(InternalTaskState.PAUSED);\n        break;\n      case InternalTaskState.CANCELING:\n        this._transition(InternalTaskState.CANCELED);\n        break;\n      case InternalTaskState.RUNNING:\n        this._start();\n        break;\n      default:\n        // TODO(andysoto): assert(false);\n        break;\n    }\n  }\n\n  /**\n   * A snapshot of the current task state.\n   */\n  get snapshot(): UploadTaskSnapshot {\n    const externalState = taskStateFromInternalTaskState(this._state);\n    return {\n      bytesTransferred: this._transferred,\n      totalBytes: this._blob.size(),\n      state: externalState,\n      metadata: this._metadata!,\n      task: this,\n      ref: this._ref\n    };\n  }\n\n  /**\n   * Adds a callback for an event.\n   * @param type - The type of event to listen for.\n   * @param nextOrObserver -\n   *     The `next` function, which gets called for each item in\n   *     the event stream, or an observer object with some or all of these three\n   *     properties (`next`, `error`, `complete`).\n   * @param error - A function that gets called with a `StorageError`\n   *     if the event stream ends due to an error.\n   * @param completed - A function that gets called if the\n   *     event stream ends normally.\n   * @returns\n   *     If only the event argument is passed, returns a function you can use to\n   *     add callbacks (see the examples above). If more than just the event\n   *     argument is passed, returns a function you can call to unregister the\n   *     callbacks.\n   */\n  on(\n    type: TaskEvent,\n    nextOrObserver?:\n      | StorageObserver<UploadTaskSnapshot>\n      | null\n      | ((snapshot: UploadTaskSnapshot) => unknown),\n    error?: ((a: StorageError) => unknown) | null,\n    completed?: Unsubscribe | null\n  ): Unsubscribe | Subscribe<UploadTaskSnapshot> {\n    const observer = new Observer(\n      (nextOrObserver as\n        | StorageObserverInternal<UploadTaskSnapshot>\n        | NextFn<UploadTaskSnapshot>) || undefined,\n      error || undefined,\n      completed || undefined\n    );\n    this._addObserver(observer);\n    return () => {\n      this._removeObserver(observer);\n    };\n  }\n\n  /**\n   * This object behaves like a Promise, and resolves with its snapshot data\n   * when the upload completes.\n   * @param onFulfilled - The fulfillment callback. Promise chaining works as normal.\n   * @param onRejected - The rejection callback.\n   */\n  then<U>(\n    onFulfilled?: ((value: UploadTaskSnapshot) => U | Promise<U>) | null,\n    onRejected?: ((error: StorageError) => U | Promise<U>) | null\n  ): Promise<U> {\n    // These casts are needed so that TypeScript can infer the types of the\n    // resulting Promise.\n    return this._promise.then<U>(\n      onFulfilled as (value: UploadTaskSnapshot) => U | Promise<U>,\n      onRejected as ((error: unknown) => Promise<never>) | null\n    );\n  }\n\n  /**\n   * Equivalent to calling `then(null, onRejected)`.\n   */\n  catch<T>(onRejected: (p1: StorageError) => T | Promise<T>): Promise<T> {\n    return this.then(null, onRejected);\n  }\n\n  /**\n   * Adds the given observer.\n   */\n  private _addObserver(observer: Observer<UploadTaskSnapshot>): void {\n    this._observers.push(observer);\n    this._notifyObserver(observer);\n  }\n\n  /**\n   * Removes the given observer.\n   */\n  private _removeObserver(observer: Observer<UploadTaskSnapshot>): void {\n    const i = this._observers.indexOf(observer);\n    if (i !== -1) {\n      this._observers.splice(i, 1);\n    }\n  }\n\n  private _notifyObservers(): void {\n    this._finishPromise();\n    const observers = this._observers.slice();\n    observers.forEach(observer => {\n      this._notifyObserver(observer);\n    });\n  }\n\n  private _finishPromise(): void {\n    if (this._resolve !== undefined) {\n      let triggered = true;\n      switch (taskStateFromInternalTaskState(this._state)) {\n        case TaskState.SUCCESS:\n          fbsAsync(this._resolve.bind(null, this.snapshot))();\n          break;\n        case TaskState.CANCELED:\n        case TaskState.ERROR:\n          const toCall = this._reject as (p1: StorageError) => void;\n          fbsAsync(toCall.bind(null, this._error as StorageError))();\n          break;\n        default:\n          triggered = false;\n          break;\n      }\n      if (triggered) {\n        this._resolve = undefined;\n        this._reject = undefined;\n      }\n    }\n  }\n\n  private _notifyObserver(observer: Observer<UploadTaskSnapshot>): void {\n    const externalState = taskStateFromInternalTaskState(this._state);\n    switch (externalState) {\n      case TaskState.RUNNING:\n      case TaskState.PAUSED:\n        if (observer.next) {\n          fbsAsync(observer.next.bind(observer, this.snapshot))();\n        }\n        break;\n      case TaskState.SUCCESS:\n        if (observer.complete) {\n          fbsAsync(observer.complete.bind(observer))();\n        }\n        break;\n      case TaskState.CANCELED:\n      case TaskState.ERROR:\n        if (observer.error) {\n          fbsAsync(\n            observer.error.bind(observer, this._error as StorageError)\n          )();\n        }\n        break;\n      default:\n        // TODO(andysoto): assert(false);\n        if (observer.error) {\n          fbsAsync(\n            observer.error.bind(observer, this._error as StorageError)\n          )();\n        }\n    }\n  }\n\n  /**\n   * Resumes a paused task. Has no effect on a currently running or failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n  resume(): boolean {\n    const valid =\n      this._state === InternalTaskState.PAUSED ||\n      this._state === InternalTaskState.PAUSING;\n    if (valid) {\n      this._transition(InternalTaskState.RUNNING);\n    }\n    return valid;\n  }\n\n  /**\n   * Pauses a currently running task. Has no effect on a paused or failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n  pause(): boolean {\n    const valid = this._state === InternalTaskState.RUNNING;\n    if (valid) {\n      this._transition(InternalTaskState.PAUSING);\n    }\n    return valid;\n  }\n\n  /**\n   * Cancels a currently running or paused task. Has no effect on a complete or\n   * failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n  cancel(): boolean {\n    const valid =\n      this._state === InternalTaskState.RUNNING ||\n      this._state === InternalTaskState.PAUSING;\n    if (valid) {\n      this._transition(InternalTaskState.CANCELING);\n    }\n    return valid;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines the Firebase StorageReference class.\n */\n\nimport { FbsBlob } from './implementation/blob';\nimport { Location } from './implementation/location';\nimport { getMappings } from './implementation/metadata';\nimport { child, parent, lastComponent } from './implementation/path';\nimport {\n  list as requestsList,\n  getMetadata as requestsGetMetadata,\n  updateMetadata as requestsUpdateMetadata,\n  getDownloadUrl as requestsGetDownloadUrl,\n  deleteObject as requestsDeleteObject,\n  multipartUpload\n} from './implementation/requests';\nimport { ListOptions, UploadResult } from './public-types';\nimport { StringFormat, dataFromString } from './implementation/string';\nimport { Metadata } from './metadata';\nimport { FirebaseStorageImpl } from './service';\nimport { ListResult } from './list';\nimport { UploadTask } from './task';\nimport { invalidRootOperation, noDownloadURL } from './implementation/error';\nimport { validateNumber } from './implementation/type';\nimport { newConnection } from './platform/connection';\n\n/**\n * Provides methods to interact with a bucket in the Firebase Storage service.\n * @internal\n * @param _location - An fbs.location, or the URL at\n *     which to base this object, in one of the following forms:\n *         gs://<bucket>/<object-path>\n *         http[s]://firebasestorage.googleapis.com/\n *                     <api-version>/b/<bucket>/o/<object-path>\n *     Any query or fragment strings will be ignored in the http[s]\n *     format. If no value is passed, the storage object will use a URL based on\n *     the project ID of the base firebase.App instance.\n */\nexport class Reference {\n  _location: Location;\n\n  constructor(\n    private _service: FirebaseStorageImpl,\n    location: string | Location\n  ) {\n    if (location instanceof Location) {\n      this._location = location;\n    } else {\n      this._location = Location.makeFromUrl(location, _service.host);\n    }\n  }\n\n  /**\n   * Returns the URL for the bucket and path this object references,\n   *     in the form gs://<bucket>/<object-path>\n   * @override\n   */\n  toString(): string {\n    return 'gs://' + this._location.bucket + '/' + this._location.path;\n  }\n\n  protected _newRef(\n    service: FirebaseStorageImpl,\n    location: Location\n  ): Reference {\n    return new Reference(service, location);\n  }\n\n  /**\n   * A reference to the root of this object's bucket.\n   */\n  get root(): Reference {\n    const location = new Location(this._location.bucket, '');\n    return this._newRef(this._service, location);\n  }\n\n  /**\n   * The name of the bucket containing this reference's object.\n   */\n  get bucket(): string {\n    return this._location.bucket;\n  }\n\n  /**\n   * The full path of this object.\n   */\n  get fullPath(): string {\n    return this._location.path;\n  }\n\n  /**\n   * The short name of this object, which is the last component of the full path.\n   * For example, if fullPath is 'full/path/image.png', name is 'image.png'.\n   */\n  get name(): string {\n    return lastComponent(this._location.path);\n  }\n\n  /**\n   * The `StorageService` instance this `StorageReference` is associated with.\n   */\n  get storage(): FirebaseStorageImpl {\n    return this._service;\n  }\n\n  /**\n   * A `StorageReference` pointing to the parent location of this `StorageReference`, or null if\n   * this reference is the root.\n   */\n  get parent(): Reference | null {\n    const newPath = parent(this._location.path);\n    if (newPath === null) {\n      return null;\n    }\n    const location = new Location(this._location.bucket, newPath);\n    return new Reference(this._service, location);\n  }\n\n  /**\n   * Utility function to throw an error in methods that do not accept a root reference.\n   */\n  _throwIfRoot(name: string): void {\n    if (this._location.path === '') {\n      throw invalidRootOperation(name);\n    }\n  }\n}\n\n/**\n * Uploads data to this object's location.\n * The upload is not resumable.\n *\n * @param ref - StorageReference where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the newly uploaded data.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadBytes(\n  ref: Reference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: Metadata\n): Promise<UploadResult> {\n  ref._throwIfRoot('uploadBytes');\n  const requestInfo = multipartUpload(\n    ref.storage,\n    ref._location,\n    getMappings(),\n    new FbsBlob(data, true),\n    metadata\n  );\n  return ref.storage\n    .makeRequestWithTokens(requestInfo, newConnection)\n    .then(finalMetadata => {\n      return {\n        metadata: finalMetadata,\n        ref\n      };\n    });\n}\n\n/**\n * Uploads data to this object's location.\n * The upload can be paused and resumed, and exposes progress updates.\n * @public\n * @param ref - StorageReference where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the newly uploaded data.\n * @returns An UploadTask\n */\nexport function uploadBytesResumable(\n  ref: Reference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: Metadata\n): UploadTask {\n  ref._throwIfRoot('uploadBytesResumable');\n  return new UploadTask(ref, new FbsBlob(data), metadata);\n}\n\n/**\n * Uploads a string to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - StorageReference where string should be uploaded.\n * @param value - The string to upload.\n * @param format - The format of the string to upload.\n * @param metadata - Metadata for the newly uploaded string.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadString(\n  ref: Reference,\n  value: string,\n  format: StringFormat = StringFormat.RAW,\n  metadata?: Metadata\n): Promise<UploadResult> {\n  ref._throwIfRoot('uploadString');\n  const data = dataFromString(format, value);\n  const metadataClone = { ...metadata } as Metadata;\n  if (metadataClone['contentType'] == null && data.contentType != null) {\n    metadataClone['contentType'] = data.contentType!;\n  }\n  return uploadBytes(ref, data.data, metadataClone);\n}\n\n/**\n * List all items (files) and prefixes (folders) under this storage reference.\n *\n * This is a helper method for calling list() repeatedly until there are\n * no more results. The default pagination size is 1000.\n *\n * Note: The results may not be consistent if objects are changed while this\n * operation is running.\n *\n * Warning: listAll may potentially consume too many resources if there are\n * too many results.\n * @public\n * @param ref - StorageReference to get list from.\n *\n * @returns A Promise that resolves with all the items and prefixes under\n *      the current storage reference. `prefixes` contains references to\n *      sub-directories and `items` contains references to objects in this\n *      folder. `nextPageToken` is never returned.\n */\nexport function listAll(ref: Reference): Promise<ListResult> {\n  const accumulator: ListResult = {\n    prefixes: [],\n    items: []\n  };\n  return listAllHelper(ref, accumulator).then(() => accumulator);\n}\n\n/**\n * Separated from listAll because async functions can't use \"arguments\".\n * @param ref\n * @param accumulator\n * @param pageToken\n */\nasync function listAllHelper(\n  ref: Reference,\n  accumulator: ListResult,\n  pageToken?: string\n): Promise<void> {\n  const opt: ListOptions = {\n    // maxResults is 1000 by default.\n    pageToken\n  };\n  const nextPage = await list(ref, opt);\n  accumulator.prefixes.push(...nextPage.prefixes);\n  accumulator.items.push(...nextPage.items);\n  if (nextPage.nextPageToken != null) {\n    await listAllHelper(ref, accumulator, nextPage.nextPageToken);\n  }\n}\n\n/**\n * List items (files) and prefixes (folders) under this storage reference.\n *\n * List API is only available for Firebase Rules Version 2.\n *\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\n * delimited folder structure.\n * Refer to GCS's List API if you want to learn more.\n *\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\n * support objects whose paths end with \"/\" or contain two consecutive\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\n * list() may fail if there are too many unsupported objects in the bucket.\n * @public\n *\n * @param ref - StorageReference to get list from.\n * @param options - See ListOptions for details.\n * @returns A Promise that resolves with the items and prefixes.\n *      `prefixes` contains references to sub-folders and `items`\n *      contains references to objects in this folder. `nextPageToken`\n *      can be used to get the rest of the results.\n */\nexport function list(\n  ref: Reference,\n  options?: ListOptions | null\n): Promise<ListResult> {\n  if (options != null) {\n    if (typeof options.maxResults === 'number') {\n      validateNumber(\n        'options.maxResults',\n        /* minValue= */ 1,\n        /* maxValue= */ 1000,\n        options.maxResults\n      );\n    }\n  }\n  const op = options || {};\n  const requestInfo = requestsList(\n    ref.storage,\n    ref._location,\n    /*delimiter= */ '/',\n    op.pageToken,\n    op.maxResults\n  );\n  return ref.storage.makeRequestWithTokens(requestInfo, newConnection);\n}\n\n/**\n * A `Promise` that resolves with the metadata for this object. If this\n * object doesn't exist or metadata cannot be retreived, the promise is\n * rejected.\n * @public\n * @param ref - StorageReference to get metadata from.\n */\nexport function getMetadata(ref: Reference): Promise<Metadata> {\n  ref._throwIfRoot('getMetadata');\n  const requestInfo = requestsGetMetadata(\n    ref.storage,\n    ref._location,\n    getMappings()\n  );\n  return ref.storage.makeRequestWithTokens(requestInfo, newConnection);\n}\n\n/**\n * Updates the metadata for this object.\n * @public\n * @param ref - StorageReference to update metadata for.\n * @param metadata - The new metadata for the object.\n *     Only values that have been explicitly set will be changed. Explicitly\n *     setting a value to null will remove the metadata.\n * @returns A `Promise` that resolves\n *     with the new metadata for this object.\n *     See `firebaseStorage.Reference.prototype.getMetadata`\n */\nexport function updateMetadata(\n  ref: Reference,\n  metadata: Partial<Metadata>\n): Promise<Metadata> {\n  ref._throwIfRoot('updateMetadata');\n  const requestInfo = requestsUpdateMetadata(\n    ref.storage,\n    ref._location,\n    metadata,\n    getMappings()\n  );\n  return ref.storage.makeRequestWithTokens(requestInfo, newConnection);\n}\n\n/**\n * Returns the download URL for the given Reference.\n * @public\n * @returns A `Promise` that resolves with the download\n *     URL for this object.\n */\nexport function getDownloadURL(ref: Reference): Promise<string> {\n  ref._throwIfRoot('getDownloadURL');\n  const requestInfo = requestsGetDownloadUrl(\n    ref.storage,\n    ref._location,\n    getMappings()\n  );\n  return ref.storage\n    .makeRequestWithTokens(requestInfo, newConnection)\n    .then(url => {\n      if (url === null) {\n        throw noDownloadURL();\n      }\n      return url;\n    });\n}\n\n/**\n * Deletes the object at this location.\n * @public\n * @param ref - StorageReference for object to delete.\n * @returns A `Promise` that resolves if the deletion succeeds.\n */\nexport function deleteObject(ref: Reference): Promise<void> {\n  ref._throwIfRoot('deleteObject');\n  const requestInfo = requestsDeleteObject(ref.storage, ref._location);\n  return ref.storage.makeRequestWithTokens(requestInfo, newConnection);\n}\n\n/**\n * Returns reference for object obtained by appending `childPath` to `ref`.\n *\n * @param ref - StorageReference to get child of.\n * @param childPath - Child path from provided ref.\n * @returns A reference to the object obtained by\n * appending childPath, removing any duplicate, beginning, or trailing\n * slashes.\n *\n */\nexport function _getChild(ref: Reference, childPath: string): Reference {\n  const newPath = child(ref._location.path, childPath);\n  const location = new Location(ref._location.bucket, newPath);\n  return new Reference(ref.storage, location);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Location } from './implementation/location';\nimport { FailRequest } from './implementation/failrequest';\nimport { Request, makeRequest } from './implementation/request';\nimport { RequestInfo } from './implementation/requestinfo';\nimport { Reference, _getChild } from './reference';\nimport { Provider } from '@firebase/component';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { AppCheckInternalComponentName } from '@firebase/app-check-interop-types';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { FirebaseApp, FirebaseOptions } from '@firebase/app';\nimport {\n  CONFIG_STORAGE_BUCKET_KEY,\n  DEFAULT_HOST,\n  DEFAULT_MAX_OPERATION_RETRY_TIME,\n  DEFAULT_MAX_UPLOAD_RETRY_TIME\n} from './implementation/constants';\nimport {\n  invalidArgument,\n  appDeleted,\n  noDefaultBucket\n} from './implementation/error';\nimport { validateNumber } from './implementation/type';\nimport { FirebaseStorage } from './public-types';\nimport { createMockUserToken, EmulatorMockTokenOptions } from '@firebase/util';\nimport { Connection } from './implementation/connection';\n\nexport function isUrl(path?: string): boolean {\n  return /^[A-Za-z]+:\\/\\//.test(path as string);\n}\n\n/**\n * Returns a firebaseStorage.Reference for the given url.\n */\nfunction refFromURL(service: FirebaseStorageImpl, url: string): Reference {\n  return new Reference(service, url);\n}\n\n/**\n * Returns a firebaseStorage.Reference for the given path in the default\n * bucket.\n */\nfunction refFromPath(\n  ref: FirebaseStorageImpl | Reference,\n  path?: string\n): Reference {\n  if (ref instanceof FirebaseStorageImpl) {\n    const service = ref;\n    if (service._bucket == null) {\n      throw noDefaultBucket();\n    }\n    const reference = new Reference(service, service._bucket!);\n    if (path != null) {\n      return refFromPath(reference, path);\n    } else {\n      return reference;\n    }\n  } else {\n    // ref is a Reference\n    if (path !== undefined) {\n      return _getChild(ref, path);\n    } else {\n      return ref;\n    }\n  }\n}\n\n/**\n * Returns a storage Reference for the given url.\n * @param storage - `Storage` instance.\n * @param url - URL. If empty, returns root reference.\n * @public\n */\nexport function ref(storage: FirebaseStorageImpl, url?: string): Reference;\n/**\n * Returns a storage Reference for the given path in the\n * default bucket.\n * @param storageOrRef - `Storage` service or storage `Reference`.\n * @param pathOrUrlStorage - path. If empty, returns root reference (if Storage\n * instance provided) or returns same reference (if Reference provided).\n * @public\n */\nexport function ref(\n  storageOrRef: FirebaseStorageImpl | Reference,\n  path?: string\n): Reference;\nexport function ref(\n  serviceOrRef: FirebaseStorageImpl | Reference,\n  pathOrUrl?: string\n): Reference | null {\n  if (pathOrUrl && isUrl(pathOrUrl)) {\n    if (serviceOrRef instanceof FirebaseStorageImpl) {\n      return refFromURL(serviceOrRef, pathOrUrl);\n    } else {\n      throw invalidArgument(\n        'To use ref(service, url), the first argument must be a Storage instance.'\n      );\n    }\n  } else {\n    return refFromPath(serviceOrRef, pathOrUrl);\n  }\n}\n\nfunction extractBucket(\n  host: string,\n  config?: FirebaseOptions\n): Location | null {\n  const bucketString = config?.[CONFIG_STORAGE_BUCKET_KEY];\n  if (bucketString == null) {\n    return null;\n  }\n  return Location.makeFromBucketSpec(bucketString, host);\n}\n\nexport function connectStorageEmulator(\n  storage: FirebaseStorageImpl,\n  host: string,\n  port: number,\n  options: {\n    mockUserToken?: EmulatorMockTokenOptions | string;\n  } = {}\n): void {\n  storage.host = `${host}:${port}`;\n  storage._protocol = 'http';\n  const { mockUserToken } = options;\n  if (mockUserToken) {\n    storage._overrideAuthToken =\n      typeof mockUserToken === 'string'\n        ? mockUserToken\n        : createMockUserToken(mockUserToken, storage.app.options.projectId);\n  }\n}\n\n/**\n * A service that provides Firebase Storage Reference instances.\n * @param opt_url - gs:// url to a custom Storage Bucket\n *\n * @internal\n */\nexport class FirebaseStorageImpl implements FirebaseStorage {\n  _bucket: Location | null = null;\n  /**\n   * This string can be in the formats:\n   * - host\n   * - host:port\n   */\n  private _host: string = DEFAULT_HOST;\n  _protocol: string = 'https';\n  protected readonly _appId: string | null = null;\n  private readonly _requests: Set<Request<unknown>>;\n  private _deleted: boolean = false;\n  private _maxOperationRetryTime: number;\n  private _maxUploadRetryTime: number;\n  _overrideAuthToken?: string;\n\n  constructor(\n    /**\n     * FirebaseApp associated with this StorageService instance.\n     */\n    readonly app: FirebaseApp,\n    readonly _authProvider: Provider<FirebaseAuthInternalName>,\n    /**\n     * @internal\n     */\n    readonly _appCheckProvider: Provider<AppCheckInternalComponentName>,\n    /**\n     * @internal\n     */\n    readonly _url?: string,\n    readonly _firebaseVersion?: string\n  ) {\n    this._maxOperationRetryTime = DEFAULT_MAX_OPERATION_RETRY_TIME;\n    this._maxUploadRetryTime = DEFAULT_MAX_UPLOAD_RETRY_TIME;\n    this._requests = new Set();\n    if (_url != null) {\n      this._bucket = Location.makeFromBucketSpec(_url, this._host);\n    } else {\n      this._bucket = extractBucket(this._host, this.app.options);\n    }\n  }\n\n  /**\n   * The host string for this service, in the form of `host` or\n   * `host:port`.\n   */\n  get host(): string {\n    return this._host;\n  }\n\n  set host(host: string) {\n    this._host = host;\n    if (this._url != null) {\n      this._bucket = Location.makeFromBucketSpec(this._url, host);\n    } else {\n      this._bucket = extractBucket(host, this.app.options);\n    }\n  }\n\n  /**\n   * The maximum time to retry uploads in milliseconds.\n   */\n  get maxUploadRetryTime(): number {\n    return this._maxUploadRetryTime;\n  }\n\n  set maxUploadRetryTime(time: number) {\n    validateNumber(\n      'time',\n      /* minValue=*/ 0,\n      /* maxValue= */ Number.POSITIVE_INFINITY,\n      time\n    );\n    this._maxUploadRetryTime = time;\n  }\n\n  /**\n   * The maximum time to retry operations other than uploads or downloads in\n   * milliseconds.\n   */\n  get maxOperationRetryTime(): number {\n    return this._maxOperationRetryTime;\n  }\n\n  set maxOperationRetryTime(time: number) {\n    validateNumber(\n      'time',\n      /* minValue=*/ 0,\n      /* maxValue= */ Number.POSITIVE_INFINITY,\n      time\n    );\n    this._maxOperationRetryTime = time;\n  }\n\n  async _getAuthToken(): Promise<string | null> {\n    if (this._overrideAuthToken) {\n      return this._overrideAuthToken;\n    }\n    const auth = this._authProvider.getImmediate({ optional: true });\n    if (auth) {\n      const tokenData = await auth.getToken();\n      if (tokenData !== null) {\n        return tokenData.accessToken;\n      }\n    }\n    return null;\n  }\n\n  async _getAppCheckToken(): Promise<string | null> {\n    const appCheck = this._appCheckProvider.getImmediate({ optional: true });\n    if (appCheck) {\n      const result = await appCheck.getToken();\n      // TODO: What do we want to do if there is an error getting the token?\n      // Context: appCheck.getToken() will never throw even if an error happened. In the error case, a dummy token will be\n      // returned along with an error field describing the error. In general, we shouldn't care about the error condition and just use\n      // the token (actual or dummy) to send requests.\n      return result.token;\n    }\n    return null;\n  }\n\n  /**\n   * Stop running requests and prevent more from being created.\n   */\n  _delete(): Promise<void> {\n    if (!this._deleted) {\n      this._deleted = true;\n      this._requests.forEach(request => request.cancel());\n      this._requests.clear();\n    }\n    return Promise.resolve();\n  }\n\n  /**\n   * Returns a new firebaseStorage.Reference object referencing this StorageService\n   * at the given Location.\n   */\n  _makeStorageReference(loc: Location): Reference {\n    return new Reference(this, loc);\n  }\n\n  /**\n   * @param requestInfo - HTTP RequestInfo object\n   * @param authToken - Firebase auth token\n   */\n  _makeRequest<T>(\n    requestInfo: RequestInfo<T>,\n    requestFactory: () => Connection,\n    authToken: string | null,\n    appCheckToken: string | null\n  ): Request<T> {\n    if (!this._deleted) {\n      const request = makeRequest(\n        requestInfo,\n        this._appId,\n        authToken,\n        appCheckToken,\n        requestFactory,\n        this._firebaseVersion\n      );\n      this._requests.add(request);\n      // Request removes itself from set when complete.\n      request.getPromise().then(\n        () => this._requests.delete(request),\n        () => this._requests.delete(request)\n      );\n      return request;\n    } else {\n      return new FailRequest(appDeleted());\n    }\n  }\n\n  async makeRequestWithTokens<T>(\n    requestInfo: RequestInfo<T>,\n    requestFactory: () => Connection\n  ): Promise<T> {\n    const [authToken, appCheckToken] = await Promise.all([\n      this._getAuthToken(),\n      this._getAppCheckToken()\n    ]);\n\n    return this._makeRequest(\n      requestInfo,\n      requestFactory,\n      authToken,\n      appCheckToken\n    ).getPromise();\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { base64urlEncodeWithoutPadding } from './crypt';\n\n// Firebase Auth tokens contain snake_case claims following the JWT standard / convention.\n/* eslint-disable camelcase */\n\nexport type FirebaseSignInProvider =\n  | 'custom'\n  | 'email'\n  | 'password'\n  | 'phone'\n  | 'anonymous'\n  | 'google.com'\n  | 'facebook.com'\n  | 'github.com'\n  | 'twitter.com'\n  | 'microsoft.com'\n  | 'apple.com';\n\ninterface FirebaseIdToken {\n  // Always set to https://securetoken.google.com/PROJECT_ID\n  iss: string;\n\n  // Always set to PROJECT_ID\n  aud: string;\n\n  // The user's unique ID\n  sub: string;\n\n  // The token issue time, in seconds since epoch\n  iat: number;\n\n  // The token expiry time, normally 'iat' + 3600\n  exp: number;\n\n  // The user's unique ID. Must be equal to 'sub'\n  user_id: string;\n\n  // The time the user authenticated, normally 'iat'\n  auth_time: number;\n\n  // The sign in provider, only set when the provider is 'anonymous'\n  provider_id?: 'anonymous';\n\n  // The user's primary email\n  email?: string;\n\n  // The user's email verification status\n  email_verified?: boolean;\n\n  // The user's primary phone number\n  phone_number?: string;\n\n  // The user's display name\n  name?: string;\n\n  // The user's profile photo URL\n  picture?: string;\n\n  // Information on all identities linked to this user\n  firebase: {\n    // The primary sign-in provider\n    sign_in_provider: FirebaseSignInProvider;\n\n    // A map of providers to the user's list of unique identifiers from\n    // each provider\n    identities?: { [provider in FirebaseSignInProvider]?: string[] };\n  };\n\n  // Custom claims set by the developer\n  [claim: string]: unknown;\n\n  uid?: never; // Try to catch a common mistake of \"uid\" (should be \"sub\" instead).\n}\n\nexport type EmulatorMockTokenOptions = ({ user_id: string } | { sub: string }) &\n  Partial<FirebaseIdToken>;\n\nexport function createMockUserToken(\n  token: EmulatorMockTokenOptions,\n  projectId?: string\n): string {\n  if (token.uid) {\n    throw new Error(\n      'The \"uid\" field is no longer supported by mockUserToken. Please use \"sub\" instead for Firebase Auth User ID.'\n    );\n  }\n  // Unsecured JWTs use \"none\" as the algorithm.\n  const header = {\n    alg: 'none',\n    type: 'JWT'\n  };\n\n  const project = projectId || 'demo-project';\n  const iat = token.iat || 0;\n  const sub = token.sub || token.user_id;\n  if (!sub) {\n    throw new Error(\"mockUserToken must contain 'sub' or 'user_id' field!\");\n  }\n\n  const payload: FirebaseIdToken = {\n    // Set all required fields to decent defaults\n    iss: `https://securetoken.google.com/${project}`,\n    aud: project,\n    iat,\n    exp: iat + 3600,\n    auth_time: iat,\n    sub,\n    user_id: sub,\n    firebase: {\n      sign_in_provider: 'custom',\n      identities: {}\n    },\n\n    // Override with user options\n    ...token\n  };\n\n  // Unsecured JWTs use the empty string as a signature.\n  const signature = '';\n  return [\n    base64urlEncodeWithoutPadding(JSON.stringify(header)),\n    base64urlEncodeWithoutPadding(JSON.stringify(payload)),\n    signature\n  ].join('.');\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { _getProvider, FirebaseApp, getApp } from '@firebase/app';\n\nimport {\n  ref as refInternal,\n  FirebaseStorageImpl,\n  connectStorageEmulator as connectEmulatorInternal\n} from './service';\nimport { Provider } from '@firebase/component';\n\nimport {\n  StorageReference,\n  FirebaseStorage,\n  UploadResult,\n  ListOptions,\n  ListResult,\n  UploadTask,\n  SettableMetadata,\n  UploadMetadata,\n  FullMetadata\n} from './public-types';\nimport { Metadata as MetadataInternal } from './metadata';\nimport {\n  uploadBytes as uploadBytesInternal,\n  uploadBytesResumable as uploadBytesResumableInternal,\n  uploadString as uploadStringInternal,\n  getMetadata as getMetadataInternal,\n  updateMetadata as updateMetadataInternal,\n  list as listInternal,\n  listAll as listAllInternal,\n  getDownloadURL as getDownloadURLInternal,\n  deleteObject as deleteObjectInternal,\n  Reference,\n  _getChild as _getChildInternal\n} from './reference';\nimport { STORAGE_TYPE } from './constants';\nimport { EmulatorMockTokenOptions, getModularInstance } from '@firebase/util';\nimport { StringFormat } from './implementation/string';\n\nexport { EmulatorMockTokenOptions } from '@firebase/util';\n\n/**\n * Public types.\n */\nexport * from './public-types';\n\nexport { Location as _Location } from './implementation/location';\nexport { UploadTask as _UploadTask } from './task';\nexport type { Reference as _Reference } from './reference';\nexport type { FirebaseStorageImpl as _FirebaseStorageImpl } from './service';\nexport { FbsBlob as _FbsBlob } from './implementation/blob';\nexport { dataFromString as _dataFromString } from './implementation/string';\nexport {\n  invalidRootOperation as _invalidRootOperation,\n  invalidArgument as _invalidArgument\n} from './implementation/error';\nexport {\n  TaskEvent as _TaskEvent,\n  TaskState as _TaskState\n} from './implementation/taskenums';\nexport { StringFormat };\n\n/**\n * Uploads data to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - {@link StorageReference} where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the data to upload.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadBytes(\n  ref: StorageReference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: UploadMetadata\n): Promise<UploadResult> {\n  ref = getModularInstance(ref);\n  return uploadBytesInternal(\n    ref as Reference,\n    data,\n    metadata as MetadataInternal\n  );\n}\n\n/**\n * Uploads a string to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - {@link StorageReference} where string should be uploaded.\n * @param value - The string to upload.\n * @param format - The format of the string to upload.\n * @param metadata - Metadata for the string to upload.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadString(\n  ref: StorageReference,\n  value: string,\n  format?: StringFormat,\n  metadata?: UploadMetadata\n): Promise<UploadResult> {\n  ref = getModularInstance(ref);\n  return uploadStringInternal(\n    ref as Reference,\n    value,\n    format,\n    metadata as MetadataInternal\n  );\n}\n\n/**\n * Uploads data to this object's location.\n * The upload can be paused and resumed, and exposes progress updates.\n * @public\n * @param ref - {@link StorageReference} where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the data to upload.\n * @returns An UploadTask\n */\nexport function uploadBytesResumable(\n  ref: StorageReference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: UploadMetadata\n): UploadTask {\n  ref = getModularInstance(ref);\n  return uploadBytesResumableInternal(\n    ref as Reference,\n    data,\n    metadata as MetadataInternal\n  ) as UploadTask;\n}\n\n/**\n * A `Promise` that resolves with the metadata for this object. If this\n * object doesn't exist or metadata cannot be retreived, the promise is\n * rejected.\n * @public\n * @param ref - {@link StorageReference} to get metadata from.\n */\nexport function getMetadata(ref: StorageReference): Promise<FullMetadata> {\n  ref = getModularInstance(ref);\n  return getMetadataInternal(ref as Reference) as Promise<FullMetadata>;\n}\n\n/**\n * Updates the metadata for this object.\n * @public\n * @param ref - {@link StorageReference} to update metadata for.\n * @param metadata - The new metadata for the object.\n *     Only values that have been explicitly set will be changed. Explicitly\n *     setting a value to null will remove the metadata.\n * @returns A `Promise` that resolves with the new metadata for this object.\n */\nexport function updateMetadata(\n  ref: StorageReference,\n  metadata: SettableMetadata\n): Promise<FullMetadata> {\n  ref = getModularInstance(ref);\n  return updateMetadataInternal(\n    ref as Reference,\n    metadata as Partial<MetadataInternal>\n  ) as Promise<FullMetadata>;\n}\n\n/**\n * List items (files) and prefixes (folders) under this storage reference.\n *\n * List API is only available for Firebase Rules Version 2.\n *\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\n * delimited folder structure.\n * Refer to GCS's List API if you want to learn more.\n *\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\n * support objects whose paths end with \"/\" or contain two consecutive\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\n * list() may fail if there are too many unsupported objects in the bucket.\n * @public\n *\n * @param ref - {@link StorageReference} to get list from.\n * @param options - See {@link ListOptions} for details.\n * @returns A `Promise` that resolves with the items and prefixes.\n *      `prefixes` contains references to sub-folders and `items`\n *      contains references to objects in this folder. `nextPageToken`\n *      can be used to get the rest of the results.\n */\nexport function list(\n  ref: StorageReference,\n  options?: ListOptions\n): Promise<ListResult> {\n  ref = getModularInstance(ref);\n  return listInternal(ref as Reference, options);\n}\n\n/**\n * List all items (files) and prefixes (folders) under this storage reference.\n *\n * This is a helper method for calling list() repeatedly until there are\n * no more results. The default pagination size is 1000.\n *\n * Note: The results may not be consistent if objects are changed while this\n * operation is running.\n *\n * Warning: `listAll` may potentially consume too many resources if there are\n * too many results.\n * @public\n * @param ref - {@link StorageReference} to get list from.\n *\n * @returns A `Promise` that resolves with all the items and prefixes under\n *      the current storage reference. `prefixes` contains references to\n *      sub-directories and `items` contains references to objects in this\n *      folder. `nextPageToken` is never returned.\n */\nexport function listAll(ref: StorageReference): Promise<ListResult> {\n  ref = getModularInstance(ref);\n  return listAllInternal(ref as Reference);\n}\n\n/**\n * Returns the download URL for the given {@link StorageReference}.\n * @public\n * @param ref - {@link StorageReference} to get the download URL for.\n * @returns A `Promise` that resolves with the download\n *     URL for this object.\n */\nexport function getDownloadURL(ref: StorageReference): Promise<string> {\n  ref = getModularInstance(ref);\n  return getDownloadURLInternal(ref as Reference);\n}\n\n/**\n * Deletes the object at this location.\n * @public\n * @param ref - {@link StorageReference} for object to delete.\n * @returns A `Promise` that resolves if the deletion succeeds.\n */\nexport function deleteObject(ref: StorageReference): Promise<void> {\n  ref = getModularInstance(ref);\n  return deleteObjectInternal(ref as Reference);\n}\n\n/**\n * Returns a {@link StorageReference} for the given url.\n * @param storage - {@link FirebaseStorage} instance.\n * @param url - URL. If empty, returns root reference.\n * @public\n */\nexport function ref(storage: FirebaseStorage, url?: string): StorageReference;\n/**\n * Returns a {@link StorageReference} for the given path in the\n * default bucket.\n * @param storageOrRef - {@link FirebaseStorage} or {@link StorageReference}.\n * @param pathOrUrlStorage - path. If empty, returns root reference (if {@link FirebaseStorage}\n * instance provided) or returns same reference (if {@link StorageReference} provided).\n * @public\n */\nexport function ref(\n  storageOrRef: FirebaseStorage | StorageReference,\n  path?: string\n): StorageReference;\nexport function ref(\n  serviceOrRef: FirebaseStorage | StorageReference,\n  pathOrUrl?: string\n): StorageReference | null {\n  serviceOrRef = getModularInstance(serviceOrRef);\n  return refInternal(\n    serviceOrRef as FirebaseStorageImpl | Reference,\n    pathOrUrl\n  );\n}\n\n/**\n * @internal\n */\nexport function _getChild(ref: StorageReference, childPath: string): Reference {\n  return _getChildInternal(ref as Reference, childPath);\n}\n\n/**\n * Gets a {@link FirebaseStorage} instance for the given Firebase app.\n * @public\n * @param app - Firebase app to get {@link FirebaseStorage} instance for.\n * @param bucketUrl - The gs:// url to your Firebase Storage Bucket.\n * If not passed, uses the app's default Storage Bucket.\n * @returns A {@link FirebaseStorage} instance.\n */\nexport function getStorage(\n  app: FirebaseApp = getApp(),\n  bucketUrl?: string\n): FirebaseStorage {\n  app = getModularInstance(app);\n  const storageProvider: Provider<'storage'> = _getProvider(app, STORAGE_TYPE);\n  const storageInstance = storageProvider.getImmediate({\n    identifier: bucketUrl\n  });\n  return storageInstance;\n}\n\n/**\n * Modify this {@link FirebaseStorage} instance to communicate with the Cloud Storage emulator.\n *\n * @param storage - The {@link FirebaseStorage} instance\n * @param host - The emulator host (ex: localhost)\n * @param port - The emulator port (ex: 5001)\n * @param options - Emulator options. `options.mockUserToken` is the mock auth\n * token to use for unit testing Security Rules.\n * @public\n */\nexport function connectStorageEmulator(\n  storage: FirebaseStorage,\n  host: string,\n  port: number,\n  options: {\n    mockUserToken?: EmulatorMockTokenOptions | string;\n  } = {}\n): void {\n  connectEmulatorInternal(storage as FirebaseStorageImpl, host, port, options);\n}\n","/**\n * Cloud Storage for Firebase\n *\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  _registerComponent,\n  registerVersion,\n  SDK_VERSION\n} from '@firebase/app';\n\nimport { FirebaseStorageImpl } from '../src/service';\nimport {\n  Component,\n  ComponentType,\n  ComponentContainer,\n  InstanceFactoryOptions\n} from '@firebase/component';\n\nimport { name, version } from '../package.json';\n\nimport { FirebaseStorage } from './public-types';\nimport { STORAGE_TYPE } from './constants';\n\nexport * from './api';\nexport * from './api.browser';\n\nfunction factory(\n  container: ComponentContainer,\n  { instanceIdentifier: url }: InstanceFactoryOptions\n): FirebaseStorage {\n  const app = container.getProvider('app').getImmediate();\n  const authProvider = container.getProvider('auth-internal');\n  const appCheckProvider = container.getProvider('app-check-internal');\n\n  return new FirebaseStorageImpl(\n    app,\n    authProvider,\n    appCheckProvider,\n    url,\n    SDK_VERSION\n  );\n}\n\nfunction registerStorage(): void {\n  _registerComponent(\n    new Component(\n      STORAGE_TYPE,\n      factory,\n      ComponentType.PUBLIC\n    ).setMultipleInstances(true)\n  );\n  //RUNTIME_ENV will be replaced during the compilation to \"node\" for nodejs and an empty string for browser\n  registerVersion(name, version, '__RUNTIME_ENV__');\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n}\n\nregisterStorage();\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Type constant for Firebase Storage.\n */\nexport const STORAGE_TYPE = 'storage';\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { UploadTaskSnapshot } from '@firebase/storage';\nimport { ReferenceCompat } from './reference';\nimport { UploadTaskCompat } from './task';\nimport * as types from '@firebase/storage-types';\nimport { Compat } from '@firebase/util';\n\nexport class UploadTaskSnapshotCompat\n  implements types.UploadTaskSnapshot, Compat<UploadTaskSnapshot>\n{\n  constructor(\n    readonly _delegate: UploadTaskSnapshot,\n    readonly task: UploadTaskCompat,\n    readonly ref: ReferenceCompat\n  ) {}\n\n  get bytesTransferred(): number {\n    return this._delegate.bytesTransferred;\n  }\n  get metadata(): types.FullMetadata {\n    return this._delegate.metadata as types.FullMetadata;\n  }\n  get state(): string {\n    return this._delegate.state;\n  }\n  get totalBytes(): number {\n    return this._delegate.totalBytes;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  UploadTask,\n  StorageError,\n  UploadTaskSnapshot,\n  TaskEvent,\n  StorageObserver\n} from '@firebase/storage';\nimport { UploadTaskSnapshotCompat } from './tasksnapshot';\nimport { ReferenceCompat } from './reference';\nimport * as types from '@firebase/storage-types';\nimport { Compat } from '@firebase/util';\n\nexport class UploadTaskCompat implements types.UploadTask, Compat<UploadTask> {\n  constructor(\n    readonly _delegate: UploadTask,\n    private readonly _ref: ReferenceCompat\n  ) {}\n\n  get snapshot(): UploadTaskSnapshotCompat {\n    return new UploadTaskSnapshotCompat(\n      this._delegate.snapshot,\n      this,\n      this._ref\n    );\n  }\n\n  cancel = this._delegate.cancel.bind(this._delegate);\n  catch = this._delegate.catch.bind(this._delegate);\n  pause = this._delegate.pause.bind(this._delegate);\n  resume = this._delegate.resume.bind(this._delegate);\n\n  then(\n    onFulfilled?: ((a: UploadTaskSnapshotCompat) => unknown) | null,\n    onRejected?: ((a: StorageError) => unknown) | null\n  ): Promise<unknown> {\n    return this._delegate.then(snapshot => {\n      if (onFulfilled) {\n        return onFulfilled(\n          new UploadTaskSnapshotCompat(snapshot, this, this._ref)\n        );\n      }\n    }, onRejected);\n  }\n\n  on(\n    type: TaskEvent,\n    nextOrObserver?:\n      | types.StorageObserver<UploadTaskSnapshotCompat>\n      | null\n      | ((a: UploadTaskSnapshotCompat) => unknown),\n    error?: (error: StorageError) => void | null,\n    completed?: () => void | null\n  ): Unsubscribe | Subscribe<UploadTaskSnapshotCompat> {\n    let wrappedNextOrObserver:\n      | StorageObserver<UploadTaskSnapshot>\n      | undefined\n      | ((a: UploadTaskSnapshot) => unknown) = undefined;\n    if (!!nextOrObserver) {\n      if (typeof nextOrObserver === 'function') {\n        wrappedNextOrObserver = (taskSnapshot: UploadTaskSnapshot) =>\n          nextOrObserver(\n            new UploadTaskSnapshotCompat(taskSnapshot, this, this._ref)\n          );\n      } else {\n        wrappedNextOrObserver = {\n          next: !!nextOrObserver.next\n            ? (taskSnapshot: UploadTaskSnapshot) =>\n                nextOrObserver.next!(\n                  new UploadTaskSnapshotCompat(taskSnapshot, this, this._ref)\n                )\n            : undefined,\n          complete: nextOrObserver.complete || undefined,\n          error: nextOrObserver.error || undefined\n        };\n      }\n    }\n    return this._delegate.on(\n      type,\n      wrappedNextOrObserver,\n      error || undefined,\n      completed || undefined\n    );\n  }\n}\n\n/**\n * Subscribes to an event stream.\n */\nexport type Subscribe<T> = (\n  next?: NextFn<T> | StorageObserver<T>,\n  error?: ErrorFn,\n  complete?: CompleteFn\n) => Unsubscribe;\n\n/**\n * Unsubscribes from a stream.\n */\nexport type Unsubscribe = () => void;\n\n/**\n * Function that is called once for each value in a stream of values.\n */\nexport type NextFn<T> = (value: T) => void;\n\n/**\n * A function that is called with a `FirebaseStorageError`\n * if the event stream ends due to an error.\n */\nexport type ErrorFn = (error: StorageError) => void;\n\n/**\n * A function that is called if the event stream ends normally.\n */\nexport type CompleteFn = () => void;\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ListResult } from '@firebase/storage';\nimport * as types from '@firebase/storage-types';\nimport { ReferenceCompat } from './reference';\nimport { StorageServiceCompat } from './service';\nimport { Compat } from '@firebase/util';\n\nexport class ListResultCompat implements types.ListResult, Compat<ListResult> {\n  constructor(\n    readonly _delegate: ListResult,\n    private readonly _service: StorageServiceCompat\n  ) {}\n\n  get prefixes(): ReferenceCompat[] {\n    return this._delegate.prefixes.map(\n      ref => new ReferenceCompat(ref, this._service)\n    );\n  }\n  get items(): ReferenceCompat[] {\n    return this._delegate.items.map(\n      ref => new ReferenceCompat(ref, this._service)\n    );\n  }\n  get nextPageToken(): string | null {\n    return this._delegate.nextPageToken || null;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  StorageReference,\n  uploadBytesResumable,\n  list,\n  listAll,\n  getDownloadURL,\n  getMetadata,\n  updateMetadata,\n  deleteObject,\n  UploadTask,\n  StringFormat,\n  UploadMetadata,\n  FullMetadata,\n  SettableMetadata,\n  _UploadTask,\n  _getChild,\n  _Reference,\n  _FbsBlob,\n  _dataFromString,\n  _invalidRootOperation\n} from '@firebase/storage';\n\nimport { UploadTaskCompat } from './task';\nimport { ListResultCompat } from './list';\nimport { StorageServiceCompat } from './service';\n\nimport * as types from '@firebase/storage-types';\nimport { Compat } from '@firebase/util';\n\nexport class ReferenceCompat\n  implements types.Reference, Compat<StorageReference>\n{\n  constructor(\n    readonly _delegate: StorageReference,\n    public storage: StorageServiceCompat\n  ) {}\n\n  get name(): string {\n    return this._delegate.name;\n  }\n\n  get bucket(): string {\n    return this._delegate.bucket;\n  }\n\n  get fullPath(): string {\n    return this._delegate.fullPath;\n  }\n\n  toString(): string {\n    return this._delegate.toString();\n  }\n\n  /**\n   * @returns A reference to the object obtained by\n   * appending childPath, removing any duplicate, beginning, or trailing\n   * slashes.\n   */\n  child(childPath: string): types.Reference {\n    const reference = _getChild(this._delegate, childPath);\n    return new ReferenceCompat(reference, this.storage);\n  }\n\n  get root(): types.Reference {\n    return new ReferenceCompat(this._delegate.root, this.storage);\n  }\n\n  /**\n   * @returns A reference to the parent of the\n   * current object, or null if the current object is the root.\n   */\n  get parent(): types.Reference | null {\n    const reference = this._delegate.parent;\n    if (reference == null) {\n      return null;\n    }\n    return new ReferenceCompat(reference, this.storage);\n  }\n\n  /**\n   * Uploads a blob to this object's location.\n   * @param data - The blob to upload.\n   * @returns An UploadTask that lets you control and\n   * observe the upload.\n   */\n  put(\n    data: Blob | Uint8Array | ArrayBuffer,\n    metadata?: types.FullMetadata\n  ): types.UploadTask {\n    this._throwIfRoot('put');\n    return new UploadTaskCompat(\n      uploadBytesResumable(this._delegate, data, metadata as UploadMetadata),\n      this\n    );\n  }\n\n  /**\n   * Uploads a string to this object's location.\n   * @param value - The string to upload.\n   * @param format - The format of the string to upload.\n   * @returns An UploadTask that lets you control and\n   * observe the upload.\n   */\n  putString(\n    value: string,\n    format: StringFormat = StringFormat.RAW,\n    metadata?: types.UploadMetadata\n  ): types.UploadTask {\n    this._throwIfRoot('putString');\n    const data = _dataFromString(format, value);\n    const metadataClone = { ...metadata };\n    if (metadataClone['contentType'] == null && data.contentType != null) {\n      metadataClone['contentType'] = data.contentType;\n    }\n    return new UploadTaskCompat(\n      new _UploadTask(\n        this._delegate as _Reference,\n        new _FbsBlob(data.data, true),\n        metadataClone as FullMetadata & { [k: string]: string }\n      ) as UploadTask,\n      this\n    );\n  }\n\n  /**\n   * List all items (files) and prefixes (folders) under this storage reference.\n   *\n   * This is a helper method for calling list() repeatedly until there are\n   * no more results. The default pagination size is 1000.\n   *\n   * Note: The results may not be consistent if objects are changed while this\n   * operation is running.\n   *\n   * Warning: listAll may potentially consume too many resources if there are\n   * too many results.\n   *\n   * @returns A Promise that resolves with all the items and prefixes under\n   *  the current storage reference. `prefixes` contains references to\n   *  sub-directories and `items` contains references to objects in this\n   *  folder. `nextPageToken` is never returned.\n   */\n  listAll(): Promise<types.ListResult> {\n    return listAll(this._delegate).then(\n      r => new ListResultCompat(r, this.storage)\n    );\n  }\n\n  /**\n   * List items (files) and prefixes (folders) under this storage reference.\n   *\n   * List API is only available for Firebase Rules Version 2.\n   *\n   * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\n   * delimited folder structure. Refer to GCS's List API if you want to learn more.\n   *\n   * To adhere to Firebase Rules's Semantics, Firebase Storage does not\n   * support objects whose paths end with \"/\" or contain two consecutive\n   * \"/\"s. Firebase Storage List API will filter these unsupported objects.\n   * list() may fail if there are too many unsupported objects in the bucket.\n   *\n   * @param options - See ListOptions for details.\n   * @returns A Promise that resolves with the items and prefixes.\n   * `prefixes` contains references to sub-folders and `items`\n   * contains references to objects in this folder. `nextPageToken`\n   * can be used to get the rest of the results.\n   */\n  list(options?: types.ListOptions | null): Promise<types.ListResult> {\n    return list(this._delegate, options || undefined).then(\n      r => new ListResultCompat(r, this.storage)\n    );\n  }\n\n  /**\n   * A `Promise` that resolves with the metadata for this object. If this\n   * object doesn't exist or metadata cannot be retreived, the promise is\n   * rejected.\n   */\n  getMetadata(): Promise<types.FullMetadata> {\n    return getMetadata(this._delegate) as Promise<types.FullMetadata>;\n  }\n\n  /**\n   * Updates the metadata for this object.\n   * @param metadata - The new metadata for the object.\n   * Only values that have been explicitly set will be changed. Explicitly\n   * setting a value to null will remove the metadata.\n   * @returns A `Promise` that resolves\n   * with the new metadata for this object.\n   * @see firebaseStorage.Reference.prototype.getMetadata\n   */\n  updateMetadata(\n    metadata: types.SettableMetadata\n  ): Promise<types.FullMetadata> {\n    return updateMetadata(\n      this._delegate,\n      metadata as SettableMetadata\n    ) as Promise<types.FullMetadata>;\n  }\n\n  /**\n   * @returns A `Promise` that resolves with the download\n   * URL for this object.\n   */\n  getDownloadURL(): Promise<string> {\n    return getDownloadURL(this._delegate);\n  }\n\n  /**\n   * Deletes the object at this location.\n   * @returns A `Promise` that resolves if the deletion succeeds.\n   */\n  delete(): Promise<void> {\n    this._throwIfRoot('delete');\n    return deleteObject(this._delegate);\n  }\n\n  private _throwIfRoot(name: string): void {\n    if ((this._delegate as _Reference)._location.path === '') {\n      throw _invalidRootOperation(name);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as types from '@firebase/storage-types';\nimport { FirebaseApp } from '@firebase/app-types';\n\nimport {\n  ref,\n  connectStorageEmulator,\n  FirebaseStorage,\n  _Location,\n  _invalidArgument,\n  _FirebaseStorageImpl\n} from '@firebase/storage';\nimport { ReferenceCompat } from './reference';\nimport { Compat, EmulatorMockTokenOptions } from '@firebase/util';\n\n/**\n * A service that provides firebaseStorage.Reference instances.\n * @param opt_url gs:// url to a custom Storage Bucket\n */\nexport class StorageServiceCompat\n  implements types.FirebaseStorage, Compat<FirebaseStorage>\n{\n  constructor(public app: FirebaseApp, readonly _delegate: FirebaseStorage) {}\n\n  get maxOperationRetryTime(): number {\n    return this._delegate.maxOperationRetryTime;\n  }\n\n  get maxUploadRetryTime(): number {\n    return this._delegate.maxUploadRetryTime;\n  }\n\n  /**\n   * Returns a firebaseStorage.Reference for the given path in the default\n   * bucket.\n   */\n  ref(path?: string): types.Reference {\n    if (isUrl(path)) {\n      throw _invalidArgument(\n        'ref() expected a child path but got a URL, use refFromURL instead.'\n      );\n    }\n    return new ReferenceCompat(ref(this._delegate, path), this);\n  }\n\n  /**\n   * Returns a firebaseStorage.Reference object for the given absolute URL,\n   * which must be a gs:// or http[s]:// URL.\n   */\n  refFromURL(url: string): types.Reference {\n    if (!isUrl(url)) {\n      throw _invalidArgument(\n        'refFromURL() expected a full URL but got a child path, use ref() instead.'\n      );\n    }\n    try {\n      _Location.makeFromUrl(url, (this._delegate as _FirebaseStorageImpl).host);\n    } catch (e) {\n      throw _invalidArgument(\n        'refFromUrl() expected a valid full URL but got an invalid one.'\n      );\n    }\n    return new ReferenceCompat(ref(this._delegate, url), this);\n  }\n\n  setMaxUploadRetryTime(time: number): void {\n    this._delegate.maxUploadRetryTime = time;\n  }\n\n  setMaxOperationRetryTime(time: number): void {\n    this._delegate.maxOperationRetryTime = time;\n  }\n\n  useEmulator(\n    host: string,\n    port: number,\n    options: {\n      mockUserToken?: EmulatorMockTokenOptions | string;\n    } = {}\n  ): void {\n    connectStorageEmulator(this._delegate, host, port, options);\n  }\n}\n\nfunction isUrl(path?: string): boolean {\n  return /^[A-Za-z]+:\\/\\//.test(path as string);\n}\n"],"names":["ErrorCode","instance","namespaceExports","stringToByteArray","str","out","p","i","length","c","charCodeAt","base64urlEncodeWithoutPadding","base64Encode","replace","base64","byteToCharMap_","charToByteMap_","byteToCharMapWebSafe_","charToByteMapWebSafe_","ENCODED_VALS_BASE","ENCODED_VALS","this","ENCODED_VALS_WEBSAFE","HAS_NATIVE_SUPPORT","atob","encodeByteArray","input","webSafe","Array","isArray","Error","init_","byteToCharMap","output","byte1","haveByte2","byte2","haveByte3","byte3","outByte3","outByte4","push","join","encodeString","btoa","decodeString","bytes","pos","c2","c3","c1","String","fromCharCode","u","byteArrayToString","decodeStringToByteArray","charToByteMap","charAt","byte4","utf8Bytes","FirebaseError","constructor","code","message","customData","super","Object","setPrototypeOf","prototype","captureStackTrace","ErrorFactory","create","service","serviceName","errors","data","fullCode","template","PATTERN","_","key","value","fullMessage","getModularInstance","_delegate","Component","name","instanceFactory","type","setInstantiationMode","mode","instantiationMode","setMultipleInstances","multipleInstances","setServiceProps","props","serviceProps","setInstanceCreatedCallback","callback","onInstanceCreated","DEFAULT_HOST","CONFIG_STORAGE_BUCKET_KEY","StorageError","prependCode","serverResponse","_baseMessage","_codeEquals","unknown","canceled","cannotSliceBlob","invalidArgument","appDeleted","invalidRootOperation","invalidFormat","format","internalError","Location","bucket","path","path_","isRoot","fullServerUrl","encode","encodeURIComponent","bucketOnlyServerUrl","makeFromBucketSpec","bucketString","host","bucketLocation","makeFromUrl","e","url","location","bucketDomain","gsRegex","RegExp","httpModify","loc","decodeURIComponent","firebaseStorageHost","firebaseStorageRegExp","cloudStorageHost","groups","regex","indices","postModify","slice","group","captures","exec","bucketValue","pathValue","FailRequest","error","promise_","Promise","reject","getPromise","cancel","_appDelete","isString","isNativeBlob","isNativeBlobDefined","Blob","validateNumber","argument","minValue","maxValue","makeUrl","urlPart","protocol","origin","makeQueryString","params","queryPart","nextPart","hasOwnProperty","NetworkRequest","url_","method_","headers_","body_","successCodes_","additionalRetryCodes_","callback_","errorCallback_","timeout_","progressCallback_","connectionFactory_","resolve","resolve_","reject_","start_","doTheRequest","backoffCallback","RequestEndStatus","connection","pendingConnection_","progressListener","progressEvent","loaded","total","lengthComputable","addUploadProgressListener","send","then","removeUploadProgressListener","wasCanceled","hitServer","getErrorCode","NO_ERROR","status","getStatus","isRetryStatusCode_","successCode","indexOf","ABORT","backoffDone","requestWentThrough","wasSuccessCode","result","getResponseText","err","appDelete_","canceled_","backoffId_","f","timeout","waitSeconds","retryTimeoutId","globalTimeoutId","hitTimeout","cancelState","triggeredCallback","triggerCallback","args","apply","callWithDelay","millis","setTimeout","handler","clearGlobalTimeout","clearTimeout","success","call","waitMillis","Math","random","stopped","stop","wasTimeout","start","appDelete","id","abort","isFiveHundredCode","isExtraRetryCode","isRequestSpecificRetryCode","getBlob","BlobBuilder","WebKitBlobBuilder","undefined","bb","append","StringFormat","RAW","BASE64","BASE64URL","DATA_URL","StringData","contentType","dataFromString","stringData","utf8Bytes_","base64Bytes_","dataUrl","parts","DataURLParts","rest","decoded","percentEncodedBytes_","b","hi","lo","Uint8Array","hasMinus","hasUnder","hasPlus","hasSlash","array","dataURL","s","end","matches","match","middle","substring","FbsBlob","elideCopy","size","blobType","data_","ArrayBuffer","byteLength","set","size_","type_","startByte","endByte","realBlob","sliced","blob","webkitSlice","mozSlice","buffer","blobby","map","val","uint8Arrays","finalLength","forEach","merged","index","uploadData","jsonObjectOrNull","obj","JSON","parse","lastComponent","lastIndexOf","noXform_","metadata","Mapping","server","local","writable","xform","mappings_","getMappings","mappings","nameMapping","_metadata","fullPath","sizeMapping","Number","addRef","defineProperty","get","_makeStorageReference","fromResourceString","resourceString","resource","len","mapping","fromResource","toResourceString","stringify","PREFIXES_KEY","fromResponseString","listResult","prefixes","items","nextPageToken","pathWithoutTrailingSlash","reference","item","fromBackendResponse","RequestInfo","method","handlerCheck","cndn","metadataHandler","xhr","text","listHandler","downloadUrlHandler","tokens","tokensList","split","alt","token","downloadUrlFromResourceString","_protocol","sharedErrorHandler","newErr","includes","objectErrorHandler","shared","getMetadata","maxOperationRetryTime","requestInfo","errorHandler","metadataForUpload_","metadataClone","assign","multipartUpload","headers","X-Goog-Upload-Protocol","boundary","toString","genBoundary","metadata_","preBlobPart","postBlobPart","body","urlParams","maxUploadRetryTime","ResumableUploadStatus","current","finalized","checkResumeHeader_","allowed","getResponseHeader","allowedStatus","createResumableUpload","metadataForUpload","X-Goog-Upload-Command","X-Goog-Upload-Header-Content-Length","X-Goog-Upload-Header-Content-Type","Content-Type","getResumableUploadStatus","sizeString","isNaN","continueResumableUpload","chunkSize","progressCallback","status_","bytesLeft","bytesToUpload","min","X-Goog-Upload-Offset","uploadStatus","newCurrent","TaskEvent","STATE_CHANGED","TaskState","RUNNING","PAUSED","SUCCESS","CANCELED","ERROR","taskStateFromInternalTaskState","state","Observer","nextOrObserver","complete","observer","next","async","argsToForward","XhrConnection","xhr_","XMLHttpRequest","errorCode_","sendPromise_","addEventListener","NETWORK_ERROR","sent_","open","setRequestHeader","responseText","header","listener","upload","removeEventListener","newConnection","UploadTask","ref","_ref","_blob","_mappings","_resumable","_shouldDoResumable","_state","_errorHandler","_request","_chunkMultiplier","_needToFetchStatus","completeTransitions_","_error","_transition","_metadataErrorHandler","_promise","_resolve","_reject","_start","_makeProgressCallback","sizeBefore","_transferred","_updateProgress","_uploadUrl","_createResumable","_fetchStatus","_needToFetchMetadata","_fetchMetadata","_continueUpload","_oneShotUpload","_resolveToken","all","storage","_getAuthToken","_getAppCheckToken","authToken","appCheckToken","_location","createRequest","_makeRequest","statusRequest","uploadRequest","_increaseMultiplier","newStatus","metadataRequest","multipartRequest","transferred","old","_notifyObservers","wasPaused","snapshot","externalState","bytesTransferred","totalBytes","task","on","completed","_addObserver","_removeObserver","onFulfilled","onRejected","catch","_observers","_notifyObserver","splice","_finishPromise","observers","triggered","fbsAsync","bind","toCall","resume","valid","pause","Reference","_service","_newRef","root","parent","newPath","_throwIfRoot","listAll","accumulator","listAllHelper","pageToken","opt","nextPage","list","options","maxResults","op","delimiter","requestsList","makeRequestWithTokens","updateMetadata","requestsUpdateMetadata","getDownloadURL","requestsGetDownloadUrl","deleteObject","_xhr","_text","successCodes","requestsDeleteObject","_getChild","childPath","canonicalChildPath","filter","component","refFromPath","FirebaseStorageImpl","_bucket","serviceOrRef","pathOrUrl","test","extractBucket","config","connectStorageEmulator","port","mockUserToken","_overrideAuthToken","projectId","uid","project","iat","sub","user_id","payload","iss","aud","exp","auth_time","firebase","sign_in_provider","identities","alg","createMockUserToken","app","_authProvider","_appCheckProvider","_url","_firebaseVersion","_maxOperationRetryTime","_maxUploadRetryTime","_requests","Set","_host","time","POSITIVE_INFINITY","auth","getImmediate","optional","tokenData","getToken","accessToken","appCheck","_delete","_deleted","request","clear","requestFactory","appId","_appId","firebaseVersion","additionalRetryCodes","add","delete","uploadBytesResumable","requestsGetMetadata","getMetadataInternal","refInternal","factory","container","instanceIdentifier","getProvider","authProvider","appCheckProvider","SDK_VERSION","_registerComponent","registerVersion","UploadTaskSnapshotCompat","UploadTaskCompat","wrappedNextOrObserver","taskSnapshot","ListResultCompat","ReferenceCompat","child","_getChildInternal","put","putString","_dataFromString","_UploadTask","_FbsBlob","listAllInternal","r","listInternal","updateMetadataInternal","getDownloadURLInternal","deleteObjectInternal","_invalidRootOperation","StorageServiceCompat","isUrl","_invalidArgument","refFromURL","_Location","setMaxUploadRetryTime","setMaxOperationRetryTime","useEmulator","connectEmulatorInternal","storageExp","identifier","Storage","INTERNAL","registerComponent"],"mappings":"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"}